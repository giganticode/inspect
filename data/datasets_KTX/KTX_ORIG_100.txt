tr	OAR	*
tr	ORE	!=
tr	KEH	throw
tr	OUT	++
tr	OAS	-=
tr	ORE	<
tr	OUT	!
tr	OLB	|
tr	ORE	<
tr	KMD	class
tr	OLB	|
tr	KEH	throws
tr	OAS	-=
tr	OLB	||
tr	OUT	++
tr	KPT	int
tr	SYM	;
tr	OUT	:
tr	KPT	int
tr	OAS	|=
tr	OAR	*
tr	KFC	if
tr	OLB	||
tr	OLB	||
tr	SYM	;
tr	KEH	throws
tr	OAS	*=
tr	SYM	]
tr	SYM	;
tr	OAR	/
tr	OAR	*
tr	SYM	{
tr	OAR	*
tr	KFC	switch
tr	KMD	protected
tr	OUT	:
tr	ORE	<
tr	KEH	throws
tr	OAS	|=
tr	KEH	throw
tr	KPT	int
tr	ORE	<
tr	KMD	static
tr	KEH	throws
tr	KPT	int
tr	KMD	static
tr	OAS	-=
tr	KFC	else
tr	ORE	<
tr	OAR	*
tr	OLB	||
tr	KPT	double
tr	KFC	if
tr	KFC	if
tr	KFC	if
tr	KMD	static
tr	KMD	class
tr	SYM	(
tr	KPT	int
tr	OUT	:
va	OUT	?
va	OAR	-
va	KMD	new
va	SYM	)
va	KEH	finally
va	KFC	while
va	KPT	byte
va	KEH	finally
va	ORE	>
va	ORE	>
va	OAS	+=
va	OAR	-
va	OLB	&&
va	OAS	+=
va	OUT	?
va	OLB	&&
va	SYM	)
va	KPT	float
va	KFC	while
va	KMD	public
te	OLB	&
te	KFC	for
te	ORE	<=
te	KMD	private
te	SYM	.
te	KEH	catch
te	OAR	+
te	OUT	--
te	OAS	=
te	KPT	boolean
te	OAR	+
te	SYM	.
te	OAS	=
te	OUT	--
te	KFC	return
te	ORE	>=
te	KMD	final
te	OLB	&
te	KPT	long
te	KEH	try
