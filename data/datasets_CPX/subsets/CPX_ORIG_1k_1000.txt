te	7	public void killHappenedAt ( PointI p , int mobSize , boolean wasSplashDamage ) { if ( ( p . x < 0 ) || ( p . y < 0 ) || ( p . x >= w ) || ( p . y >= h ) ) return ; double amount = 1f / mobSize / mobSize ; for ( int y = 0 ; y < mobSize ; y ++ ) { for ( int x = 0 ; x < mobSize ; x ++ ) { if ( wasSplashDamage ) { splashKillCounts [ p . y + y ] [ p . x + x ] += amount ; } else { normalKillCounts [ p . y + y ] [ p . x + x ] += amount ; } } } }
te	2	public TestClient ( int port , String name ) { try { count ++ ; socket = new Socket ( InetAddress . getLocalHost ( ) , port ) ; this . name = name ; this . setName ( "TestClientThread-" + count ) ; } catch ( UnknownHostException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
te	4	@ Override protected void imprimirTabuleiro ( TabuleiroXadrez tabuleiro ) { imprimirLinha ( "      1        2        3        4        5        6        7        8     " ) ; for ( int linha = 8 ; linha >= 1 ; linha -- ) { imprimirLinha ( "  -------------------------------------------------------------------------" ) ; imprimir ( linha + " " ) ; for ( int coluna = 1 ; coluna <= 8 ; coluna ++ ) { imprimir ( "|" ) ; Peca peca = tabuleiro . espiarPeca ( new Posicao ( coluna , linha ) ) ; imprimir ( PecaToString ( peca ) ) ; if ( peca == null ) imprimir ( "       " ) ; else if ( peca . getCorJogador ( ) == TipoCorJogador . BRANCO ) imprimir ( " branco" ) ; else imprimir ( " preto " ) ; } imprimirLinha ( "| " + linha ) ; } imprimirLinha ( "  -------------------------------------------------------------------------" ) ; imprimirLinha ( "      1        2        3        4        5        6        7        8     " ) ; }
te	8	public static float nextAfter ( final float f , final double direction ) { if ( double . isNaN ( f ) || double . isNaN ( direction ) ) { return float . NaN ; } else if ( f == direction ) { return ( float ) direction ; } else if ( float . isInfinite ( f ) ) { return ( f < 0f ) ? - float . MAX_VALUE : float . MAX_VALUE ; } else if ( f == 0f ) { return ( direction < 0 ) ? - float . MIN_VALUE : float . MIN_VALUE ; } final int bits = float . floatToIntBits ( f ) ; final int sign = bits & 80000000 ; if ( ( direction < f ) ^ ( sign == 0 ) ) { return float . intBitsToFloat ( sign | ( ( bits & 7fffffff ) + 1 ) ) ; } else { return float . intBitsToFloat ( sign | ( ( bits & 7fffffff ) - 1 ) ) ; } }
te	9X	public static void arraycopy ( final float [ ] src , final int srcPos , final FloatLargeArray dest , final long destPos , final long length ) { if ( srcPos < 0 || srcPos >= src . length ) { throw new ArrayIndexOutOfBoundsException ( "srcPos < 0 || srcPos >= src.length" ) ; } if ( destPos < 0 || destPos >= dest . length ( ) ) { throw new ArrayIndexOutOfBoundsException ( "destPos < 0 || destPos >= dest.length()" ) ; } if ( length < 0 ) { throw new IllegalArgumentException ( "length < 0" ) ; } if ( dest . isConstant ( ) ) { throw new IllegalArgumentException ( "Constant arrays cannot be modified." ) ; } int i = srcPos ; int nthreads = ( int ) Math . min ( length , Runtime . getRuntime ( ) . availableProcessors ( ) ) ; if ( nthreads < 2 || length < 100000 ) { for ( long j = destPos ; j < destPos + length ; j ++ ) { dest . setFloat ( j , src [ i ++ ] ) ; } } else { long k = length / nthreads ; Thread [ ] threads = new Thread [ nthreads ] ; for ( int j = 0 ; j < nthreads ; j ++ ) { final long firstIdx = j * k ; final long lastIdx = ( j == nthreads - 1 ) ? length : firstIdx + k ; threads [ j ] = new Thread ( new Runnable ( ) { @ Override public void run ( ) { for ( long k = firstIdx ; k < lastIdx ; k ++ ) { dest . setFloat ( destPos + k , src [ srcPos + ( int ) k ] ) ; } } } ) ; threads [ j ] . start ( ) ; } try { for ( int j = 0 ; j < nthreads ; j ++ ) { threads [ j ] . join ( ) ; threads [ j ] = null ; } } catch ( InterruptedException ex ) { for ( long j = destPos ; j < destPos + length ; j ++ ) { dest . setFloat ( j , src [ i ++ ] ) ; } } } }
te	5	@ Override public void draw ( SpriteBatch batch ) { if ( object . isVisible ( ) ) { graphics . draw ( batch ) ; } if ( animate ) { stateTime += Gdx . graphics . getDeltaTime ( ) ; currentFrame = explosionAnimation . getKeyFrame ( stateTime , false ) ; batch . draw ( currentFrame , ( animPos . x - 1f ) , ( animPos . y - 1f ) , 2 , 2 ) ; if ( explosionAnimation . isAnimationFinished ( stateTime ) ) { animate = false ; WorldObject . removelist . add ( object ) ; } } else if ( animateMiss ) { stateTime += Gdx . graphics . getDeltaTime ( ) ; currentFrame = splashAnimation . getKeyFrame ( stateTime , false ) ; batch . draw ( currentFrame , ( animPos . x - .5f ) , ( animPos . y - .5f ) , 1 , 1 ) ; if ( splashAnimation . isAnimationFinished ( stateTime ) ) { animateMiss = false ; WorldObject . removelist . add ( object ) ; } } }
te	4	@ Override public boolean getPoint ( int mouseX , int mouseY ) { int newX = - 1 ; int newY = - 1 ; if ( mouseX < 800 ) { int cx = Boot . getPlayer ( ) . getX ( ) ; int cy = Boot . getPlayer ( ) . getY ( ) ; newX = cx + ( mouseX / Standards . TILE_SIZE ) - 12 ; newY = cy + ( ( Standards . W_HEIGHT - mouseY ) / Standards . TILE_SIZE ) - 12 ; } if ( newX != - 1 && newY != - 1 ) { if ( picks == 0 ) { this . posX = newX ; this . posY = newY ; picks = 1 ; } else { this . posX2 = newX ; this . posY2 = newY ; picks = 0 ; } } return true ; }
te	4	public void run ( ) { useful = true ; UiApplication . getUiApplication ( ) . invokeLater ( new Runnable ( ) { public void run ( ) { UiApplication . getUiApplication ( ) . pushScreen ( popup ) ; } } ) ; int iterations = 0 ; while ( useful ) { try { Thread . sleep ( timeout ) ; } catch ( Exception e ) { } if ( ++ iterations > maximum ) iterations = 1 ; gaugeField . setValue ( iterations ) ; } if ( popup . isDisplayed ( ) ) { UiApplication . getUiApplication ( ) . invokeLater ( new Runnable ( ) { public void run ( ) { UiApplication . getUiApplication ( ) . popScreen ( popup ) ; } } ) ; } }
te	1	public void print ( TreeNode root ) { if ( root == null ) { System . out . print ( " # " ) ; return ; } else { System . out . print ( " " + root . val + " " ) ; } print ( root . left ) ; print ( root . right ) ; }
te	4	protected EncodedString decodeEncodedCharacterStringOnThirdbit ( ) throws IOException , FastInfosetException { switch ( current_octet & FastInfosetConstants . ENCODED_CHARACTER_STRING_3RD_BIT_MASK_DISCRIMINANT ) { case FastInfosetConstants . ENCODED_CHARACTER_STRING_3RD_BIT_UTF8_DISCRIMINANT : encodedStringBuffer . setUTF8 ( decodeUTF8inInternalEncodingBufferAsString ( decodeNonEmptyOctetStringOnFifthBit ( ) ) ) ; return encodedStringBuffer ; case FastInfosetConstants . ENCODED_CHARACTER_STRING_3RD_BIT_UTF16_DISCRIMINANT : encodedStringBuffer . setUTF16 ( decodeUTF16inInternalEncodingBufferAsString ( decodeNonEmptyOctetStringOnFifthBit ( ) ) ) ; return encodedStringBuffer ; case FastInfosetConstants . ENCODED_CHARACTER_STRING_3RD_BIT_ALGORITHM_DISCRIMINANT : int index = decodeOctetInteger ( 5 ) ; Algorithm algo = vocabulary . algorithms . get ( index ) ; encodedStringBuffer . setAlgorithm ( index , algo , decodeNonEmptyOctetStringOnFifthBit ( ) ) ; return encodedStringBuffer ; case FastInfosetConstants . ENCODED_CHARACTER_STRING_3RD_BIT_ALPHABET_DISCRIMINANT : int index2 = decodeOctetInteger ( 5 ) ; Algorithm algo2 = vocabulary . alphabets . get ( index2 ) ; encodedStringBuffer . setAlphabet ( index2 , algo2 , algo2 . fromByteArray ( decodeNonEmptyOctetStringOnFifthBit ( ) ) ) ; return encodedStringBuffer ; } throw new FastInfosetException ( ) ; }
te	9X	public void DesativaCampos ( ) { for ( Component c : tela . getjPFicha ( ) . getComponents ( ) ) { if ( c instanceof JComboBox ) { ( ( JComboBox ) c ) . setEnabled ( false ) ; } if ( c instanceof JCheckBox ) { ( ( JCheckBox ) c ) . setEnabled ( false ) ; } if ( c instanceof JTextField ) { ( ( JTextField ) c ) . setEnabled ( false ) ; } if ( c instanceof JDateChooser ) { ( ( JDateChooser ) c ) . setEnabled ( false ) ; } if ( c instanceof JScrollPane ) { for ( Component co : ( ( JScrollPane ) c ) . getComponents ( ) ) { if ( co instanceof JViewport ) { for ( Component com : ( ( JViewport ) co ) . getComponents ( ) ) { if ( com instanceof JTextArea ) { ( ( JTextArea ) com ) . setEnabled ( false ) ; } } } } } } }
te	4	public void testLineSeriesChart ( ) { LineSeriesChart < Number , Number > chart = new LineSeriesChart < Number , Number > ( "Curves" , "X" , "Y" ) ; Collection < LineSeriesItem < Number , Number >> linhaSin = new ArrayList < LineSeriesItem < Number , Number >> ( ) ; for ( double i = 0 ; i <= 6 ; i += 0.01 ) { linhaSin . add ( new LineSeriesItem < Number , Number > ( i , Math . sin ( i ) + 4 ) ) ; } chart . addValue ( linhaSin ) ; Collection < LineSeriesItem < Number , Number >> linhaCos = new ArrayList < LineSeriesItem < Number , Number >> ( ) ; for ( double i = 0 ; i <= 6 ; i += 0.01 ) { linhaCos . add ( new LineSeriesItem < Number , Number > ( i , Math . cos ( i ) ) ) ; } chart . addValue ( linhaCos ) ; Collection < LineSeriesItem < Number , Number >> linhaExp = new ArrayList < LineSeriesItem < Number , Number >> ( ) ; for ( double i = 0 ; i <= 2 ; i += 0.01 ) { linhaExp . add ( new LineSeriesItem < Number , Number > ( i , Math . exp ( i ) + 1 ) ) ; } chart . addValue ( linhaExp ) ; Collection < LineSeriesItem < Number , Number >> linhaReta = new ArrayList < LineSeriesItem < Number , Number >> ( ) ; for ( double i = 0 ; i <= 6 ; i += 0.01 ) { linhaReta . add ( new LineSeriesItem < Number , Number > ( i , i ) ) ; } chart . addValue ( linhaReta ) ; Highlighter highlighter = criarHighlighter ( ) ; chart . getChartConfiguration ( ) . setHighlighter ( highlighter ) ; chart . addSerie ( criarSerie ( "Seno" , "#489104" ) ) ; chart . addSerie ( criarSerie ( "Coseno" , "#c91212" ) ) ; chart . addSerie ( criarSerie ( "Exponensial" , "#7D02B2" ) ) ; chart . addSerie ( criarSerie ( "Reta" , "#066FA7" ) ) ; Legend legend = new Legend ( true , Location . ne ) ; legend . setPlacement ( "outsideGrid" ) ; chart . setLegend ( legend ) ; Axis < String > axis = new AxisString ( ) ; axis . setLabelRenderer ( JqPlotResources . CanvasAxisLabelRenderer ) ; chart . setAxesDefaults ( axis ) ; Axes axes = chart . getAxes ( ) ; XAxis xaxis = axes . getXaxis ( ) ; TickOptions tickOptions = new TickOptions ( ) ; tickOptions . setAngle ( 270 ) ; tickOptions . setLabelPosition ( "end" ) ; xaxis . setTickOptions ( tickOptions ) ; xaxis . setTickRenderer ( JqPlotResources . CanvasAxisTickRenderer ) ; xaxis . setTickInterval ( 1 ) ; axes . getYaxis ( ) . setTickInterval ( 0.50 ) ; axes . getYaxis ( ) . setMax ( 8.50 ) ; axes . getYaxis ( ) . setMin ( - 1.50 ) ; TickOptions tickOptionsY = new TickOptions ( ) ; tickOptionsY . setFormatString ( "%.2f" ) ; axes . getYaxis ( ) . setTickOptions ( tickOptionsY ) ; Grid grid = new Grid ( ) ; grid . setBackground ( "#ffffff" ) ; grid . setGridLineColer ( "#a0a0a0" ) ; chart . getChartConfiguration ( ) . setGrid ( grid ) ; Cursor cursor = new Cursor ( ) ; cursor . setZoom ( true ) ; cursor . setClickReset ( true ) ; chart . getChartConfiguration ( ) . setCursor ( cursor ) ; String json = JqPlotUtils . createJquery ( chart , "div3" ) ; json = json . replaceAll ( "\\$" , "jQuery" ) ; System . out . println ( json ) ; }
te	3	public DictionarySet ( ) { isCounting = false ; dicts = new Dictionary [ DictionaryTypes . TYPE_END . ordinal ( ) ] ; tot = dicts . length ; for ( int i = 0 ; i < tot ; ++ i ) { dicts [ i ] = new Dictionary ( ) ; int id = dicts [ i ] . lookupIndex ( unseen ) ; Utils . assert ( id == 1 ) ; if ( i == DictionaryTypes . POS . ordinal ( ) ) initDict ( DictionaryTypes . POS , dicts [ i ] ) ; if ( i == DictionaryTypes . WORD . ordinal ( ) ) initDict ( DictionaryTypes . WORD , dicts [ i ] ) ; } }
te	3	static private final int jjMoveStringLiteralDfa13_0 ( long old0 , long active0 ) { if ( ( ( active0 &= old0 ) ) == 0 ) return jjStartNfa_0 ( 11 , old0 ) ; try { curChar = input_stream . readChar ( ) ; } catch ( java . io . IOException e ) { jjStopStringLiteralDfa_0 ( 12 , active0 ) ; return 13 ; } switch ( curChar ) { case 67 : return jjMoveStringLiteralDfa14_0 ( active0 , 10 ) ; default : break ; } return jjStartNfa_0 ( 12 , active0 ) ; }
te	4	public static void run ( class < ? extends Window > clazz , class < ? > [ ] args , Object [ ] param ) { try { executeInstance ( ( Window ) clazz . getConstructor ( args ) . newInstance ( param ) ) ; } catch ( InstantiationException e ) { e . printStackTrace ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
te	9X	public static AbstractUIItem createItem ( FeatureType t , Panel panel ) { switch ( t ) { case Constant : return new ConstantUIItem ( panel ) ; case Sink : return new SinkUIItem ( panel ) ; case Source : return new SourceUIItem ( panel ) ; case Saddle : return new SaddleUIItem ( panel ) ; case Center : return new CenterUIItem ( panel ) ; case Focus : return new FocusUIItem ( panel ) ; case ConvergingElement : return new ConvergingElementUIItem ( panel ) ; case DivergingElement : return new DivergingElementUIItem ( panel ) ; case Generic : return new GenericUIItem ( panel ) ; } assert false : "Unhandled type: " + t ; return null ; }
te	0	public int getPeopleOnStation ( ) { return peopleOnStation ; }
te	6	public static void main ( String args [ ] ) { try { for ( javax . swing . UIManager . LookAndFeelInfo info : javax . swing . UIManager . getInstalledLookAndFeels ( ) ) { if ( "Nimbus" . equals ( info . getName ( ) ) ) { javax . swing . UIManager . setLookAndFeel ( info . getClassName ( ) ) ; break ; } } } catch ( ClassNotFoundException ex ) { java . util . logging . Logger . getLogger ( Consulta_datos . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( InstantiationException ex ) { java . util . logging . Logger . getLogger ( Consulta_datos . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( IllegalAccessException ex ) { java . util . logging . Logger . getLogger ( Consulta_datos . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } catch ( javax . swing . UnsupportedLookAndFeelException ex ) { java . util . logging . Logger . getLogger ( Consulta_datos . class . getName ( ) ) . log ( java . util . logging . Level . SEVERE , null , ex ) ; } java . awt . EventQueue . invokeLater ( new Runnable ( ) { public void run ( ) { new Consulta_datos ( ) . setVisible ( true ) ; } } ) ; }
te	6	public String getRecords ( ) { StringBuilder resultado = new StringBuilder ( ) ; if ( tipo != null ) { Declaracion tmp = tipo ; TipoDeclaracion tdecl = null ; TipoRecord trec1 = null ; while ( tmp != null ) { if ( tmp instanceof TipoDeclaracion ) { resultado . append ( ".namespace Ejemplo{\n" ) ; tdecl = ( ( TipoDeclaracion ) tmp ) ; resultado . append ( "\t.class private sequential ansi sealed beforefieldinit " ) . append ( tdecl . getNombre ( ) ) ; resultado . append ( " extends [mscorlib]System.ValueType{\n" ) ; Tipo t = InfSemantica . getInstancia ( ) . tablaGlobal . get ( tdecl . getNombre ( ) ) ; TipoRecord record = ( ( TipoRecord ) t ) ; Collections . reverse ( record . tbsimbolo . lista ) ; Collections . reverse ( record . tbsimbolo . tipos ) ; for ( int i = 0 ; i < record . tbsimbolo . lista . size ( ) ; i ++ ) { if ( record . tbsimbolo . tipos . get ( i ) instanceof TipoRecord ) { trec1 = ( ( TipoRecord ) record . tbsimbolo . tipos . get ( i ) ) ; resultado . append ( "\t\t.field  public\t" ) . append ( "valuetype Ejemplo." ) . append ( trec1 . nombre ) . append ( " " ) . append ( record . tbsimbolo . lista . get ( i ) ) . append ( "\n" ) ; } else if ( record . tbsimbolo . tipos . get ( i ) instanceof TipoArray ) { } else { resultado . append ( "\t\t.field  public\t" ) . append ( record . tbsimbolo . tipos . get ( i ) . toString ( ) ) . append ( " " ) . append ( record . tbsimbolo . lista . get ( i ) ) . append ( "\n" ) ; } } resultado . append ( "\n\t}\n}\n" ) ; } tmp = tmp . getSiguiente ( ) ; } } else { resultado . append ( "" ) ; } return resultado . toString ( ) ; }
te	5	public void update ( final World w ) { for ( short x = 0 ; x < sideLength ; x ++ ) { for ( short y = 0 ; y < sideLength ; y ++ ) { short tileX = ( short ) ( x + ( coords . getX ( ) * sideLength ) ) ; short tileY = ( short ) ( y + ( coords . getY ( ) * sideLength ) ) ; final Tile t = getTile ( x , y ) ; if ( ( t == Tiles . air ) || ( t == null ) ) { new Packet03Tile ( t , tileX , tileY ) . writeDataToServer ( ) ; } if ( t . doesTick ( ) ) { t . update ( w , tileX , tileY ) ; } } } }
te	8	@ Override public boolean equals ( Object cidades ) { if ( cidades == null ) { return false ; } if ( getClass ( ) != cidades . getClass ( ) ) { return false ; } final Cidades other = ( Cidades ) cidades ; if ( ( this . nome == null ) ? ( other . nome != null ) : ! this . nome . equals ( other . nome ) ) { return false ; } if ( ( this . uf == null ) ? ( other . uf != null ) : ! this . uf . equals ( other . uf ) ) { return false ; } if ( ( this . ddd == null ) ? ( other . ddd != null ) : ! this . ddd . equals ( other . ddd ) ) { return false ; } return true ; }
te	7	public static void main ( String [ ] args ) { boolean [ ] primes = new boolean [ SIZE ] ; for ( int i = 2 ; i < SIZE ; i ++ ) primes [ i ] = true ; for ( int i = 2 ; i < SIZE ; i ++ ) if ( primes [ i ] ) for ( int j = 2 ; i * j < SIZE ; j ++ ) primes [ i * j ] = false ; ArrayList < Integer > primeList = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < SIZE ; i ++ ) if ( primes [ i ] ) primeList . add ( i ) ; ArrayList < Radical > radicals = new ArrayList < Radical > ( ) ; for ( int i = 0 ; i <= SIZE ; i ++ ) radicals . add ( new Radical ( i , primeList ) ) ; radicals = sort ( radicals ) ; System . out . print ( radicals . get ( SIZE / 10 ) . num ) ; }
te	8	@ Override public void computePerformanceMeasures ( ) throws InternalErrorException { totalTimer . start ( ) ; BigRational [ ] X = new BigRational [ qnm . R ] ; BigRational [ ] [ ] Q = new BigRational [ qnm . M ] [ qnm . R ] ; if ( lastG [ 0 ] . isUndefined ( ) ) { throw new InternalErrorException ( ( "Singular system. Cannot compute performance indices." ) ) ; } for ( int i = 0 ; i < qnm . M ; i ++ ) { for ( int r = 0 ; r < qnm . R - 1 ; r ++ ) { if ( ! lastG [ sz * ( r + 1 ) + i + 1 ] . isUndefined ( ) ) { Q [ i ] [ r ] = qnm . getDemandAsBigRational ( i , r ) . multiply ( lastG [ sz * ( r + 1 ) + i + 1 ] ) . divide ( lastG [ 0 ] ) ; } else { throw new InternalErrorException ( ( "Singular system. Cannot compute performance indices." ) ) ; } } if ( ! prevG [ i + 1 ] . isUndefined ( ) ) { Q [ i ] [ qnm . R - 1 ] = qnm . getDemandAsBigRational ( i , qnm . R - 1 ) . multiply ( prevG [ i + 1 ] ) . divide ( lastG [ 0 ] ) ; } else { throw new InternalErrorException ( ( "Singular system. Cannot compute performance indices." ) ) ; } } for ( int r = 0 ; r < qnm . R - 1 ; r ++ ) { if ( ! lastG [ sz * ( r + 1 ) ] . isUndefined ( ) ) { X [ r ] = lastG [ sz * ( r + 1 ) ] . divide ( lastG [ 0 ] ) ; } else { throw new InternalErrorException ( ( "Singular system. Cannot compute performance indices." ) ) ; } } if ( ! prevG [ 0 ] . isUndefined ( ) ) { X [ qnm . R - 1 ] = prevG [ 0 ] . divide ( lastG [ 0 ] ) ; } else { throw new InternalErrorException ( ( "Singular system. Cannot compute performance indices." ) ) ; } totalTimer . pause ( ) ; qnm . setPerformanceMeasures ( Q , X ) ; }
te	7	private boolean placeRandomTeleportLocation ( int [ ] [ ] map , int [ ] randomlocation ) { if ( map == null ) throw new IllegalArgumentException ( "Invalid argument: map is null" ) ; if ( map [ 0 ] == null ) throw new IllegalArgumentException ( "Invalid argument: a row is null" ) ; if ( randomlocation . length != 2 ) throw new IllegalArgumentException ( "Invalid argument: the randomlocation array-holder is not of length 2" ) ; ArrayList < int [ ] > availableLocations = new ArrayList < > ( ) ; for ( int i = 0 ; i < map . length ; i ++ ) { for ( int j = 0 ; j < map [ 0 ] . length ; j ++ ) { if ( map [ i ] [ j ] == 0 ) { availableLocations . add ( new int [ ] { i , j } ) ; } } } if ( availableLocations . size ( ) == 0 ) { java . lang . System . out . println ( "Warning: You have a teleporter in a map with no spaces" ) ; return false ; } Random random = new Random ( ) ; random . setSeed ( java . lang . System . currentTimeMillis ( ) ) ; int index = random . nextInt ( availableLocations . size ( ) ) ; int [ ] chosen = availableLocations . get ( index ) ; randomlocation [ 0 ] = chosen [ 0 ] ; randomlocation [ 1 ] = chosen [ 1 ] ; return true ; }
te	3	@ Override public void tick ( Input input , double delta ) { if ( this . dummy . getCommands ( ) . isEmpty ( ) ) { double ran = Math . random ( ) ; if ( ran >= 0.5 ) { } else { this . dummy . wait ( Math . random ( ) * 0.4 ) ; } ran = Math . random ( ) ; if ( ran >= 0.2 ) { this . dummy . getCommands ( ) . add ( new JumpCommand ( this . dummy ) ) ; } } }
te	5	private void howMany ( int [ ] [ ] paper , int n1 , int n2 , int m1 , int m2 ) { if ( counter . contains ( Arrays . asList ( n1 , n2 , m1 , m2 ) ) ) return ; counter . add ( Arrays . asList ( n1 , n2 , m1 , m2 ) ) ; for ( int d = m1 ; d <= m2 - 1 ; d ++ ) { if ( foldsVertically ( paper , n1 , n2 , m1 , m2 , d ) ) { if ( d <= ( m1 + m2 - 1 ) / 2 ) { howMany ( paper , n1 , n2 , d + 1 , m2 ) ; } if ( d >= ( m1 + m2 - 1 ) / 2 ) { howMany ( paper , n1 , n2 , m1 , d ) ; } } } }
te	0	@ XmlElementDecl ( namespace = "" , name = "xRequest" ) public JAXBElement < BigInteger > createXRequest ( BigInteger value ) { return new JAXBElement < BigInteger > ( _XRequest_QNAME , BigInteger . class , null , value ) ; }
te	2	public boolean isSet ( _Fields field ) { if ( field == null ) { throw new IllegalArgumentException ( ) ; } switch ( field ) { case GET_LANG : return isSetGetLang ( ) ; } throw new IllegalStateException ( ) ; }
te	0	public boolean isSchoolAnnouncements ( ) { return schoolAnnouncements ; }
te	6	@ Override public void run ( ) { if ( getLocation ( ) . distance ( bankerTile ) <= 10 ) { goHome ( ) ; } Time . sleep ( rand . nextInt ( 2000 ) ) ; if ( getLocation ( ) . equals ( new Tile ( 3262 , 3322 , 0 ) ) || getLocation ( ) . equals ( new Tile ( 3262 , 3323 , 0 ) ) ) { Walking . walk ( Field ) ; Time . sleep ( 5000 ) ; } SceneObject Gate = SceneEntities . getNearest ( new Filter < SceneObject > ( ) { public boolean accept ( SceneObject entity ) { return entity . getId ( ) == 45206 ; } } ) ; if ( getLocation ( ) . distance ( Gate ) <= 5 ) { Gate . interact ( "Open" ) ; Time . sleep ( 3000 ) ; } if ( getLocation ( ) . distance ( Gate ) <= 5 && ! Gate . isOnScreen ( ) ) { Camera . turnTo ( Gate ) ; Time . sleep ( 3000 ) ; } }
te	3	public static String StrFill ( String fillStr , String oldStr , int length , String place ) { StringBuffer sb = new StringBuffer ( ) ; if ( "right" . equals ( place ) ) { sb . append ( oldStr ) ; } for ( int i = 0 ; i < ( length - oldStr . length ( ) ) ; i ++ ) { sb . append ( fillStr ) ; } if ( "left" . equals ( place ) ) { sb . append ( oldStr ) ; } return sb . toString ( ) ; }
te	1	public void update ( M m , Connection conn ) { int result = update ( m , allFields ( ) , conn , "WHERE " + Cols . getSingle ( idFields ) . sqlName + "=?" , getId ( m ) ) ; if ( result != 1 ) { throw new RuntimeException ( "Failed to update record into " + tableName + " table" ) ; } }
te	8	private void bfs ( State s ) { s . id = - 1 ; Loc f = map . finish ; int counter = 0 ; LinkedList < Node > frontier = new LinkedList < Node > ( ) ; Set < State > explored = new HashSet < State > ( ) ; LinkedList < State > solution = new LinkedList < State > ( ) ; frontier . addLast ( new Node ( s , null , 0 ) ) ; while ( ! frontier . isEmpty ( ) ) { Node current = frontier . removeFirst ( ) ; if ( goalTest ( current . state , f ) ) { for ( Node node = current ; node != null ; node = node . parent ) { solution . addFirst ( node . state ) ; } System . out . println ( "found goal!" ) ; System . out . println ( "moves: " + solution . size ( ) ) ; mSolutions . addAll ( solution ) ; return ; } explored . add ( current . state ) ; if ( counter % 5000 == 0 ) { System . out . print ( "\n" ) ; } ; if ( counter % 50 == 0 ) { System . out . print ( "." ) ; } ; ArrayList < State > possibles = getMovesCorrectlyPlease ( current . state ) ; for ( int i = 0 ; i < possibles . size ( ) ; i ++ ) { State possib = possibles . get ( i ) ; if ( ! explored . contains ( possib ) ) { frontier . addLast ( new Node ( possib , current , current . distance + 1 ) ) ; } } counter ++ ; } if ( solution . isEmpty ( ) ) { System . out . println ( "FAILED TO FIND SOLUTION" ) ; } }
te	1	public T getValue ( ) { if ( available == false ) { throw new RuntimeException ( "Value not available" ) ; } return value ; }
te	2	public synchronized void produce ( ) { try { if ( product != 0 ) { wait ( ) ; } } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } product = 1 ; System . out . println ( "Producer produce : " + product ) ; notifyAll ( ) ; }
te	9X	private void parseSpriteSheets ( ) throws IOException , ExpectedTokenException , InvalidTokenException { String line ; line = reader . readLine ( ) ; if ( ! line . equals ( "SPRITESHEETS" ) ) { throw new ExpectedTokenException ( "SPRITESHEETS" , line ) ; } line = reader . readLine ( ) ; while ( line != null && ! line . equals ( "END SPRITESHEETS" ) ) { scanner = new Scanner ( line ) ; if ( ! scanner . hasNext ( ) ) { throw new ExpectedTokenException ( "<file>" , line ) ; } String file = scanner . next ( ) ; if ( ! scanner . hasNextInt ( ) ) { throw new ExpectedTokenException ( "<frame width>" , line ) ; } int frameWidth = scanner . nextInt ( ) ; if ( ! scanner . hasNextInt ( ) ) { throw new ExpectedTokenException ( "<frame height>" , line ) ; } int frameHeight = scanner . nextInt ( ) ; if ( ! scanner . hasNextInt ( ) ) { throw new ExpectedTokenException ( "<padding x>" , line ) ; } int paddingX = scanner . nextInt ( ) ; if ( ! scanner . hasNextInt ( ) ) { throw new ExpectedTokenException ( "<padding y>" , line ) ; } int paddingY = scanner . nextInt ( ) ; SpriteSheet sheet = new SpriteSheet ( file , new Vec2i ( frameWidth , frameHeight ) , new Vec2i ( paddingX , paddingY ) ) ; sheets . put ( file , sheet ) ; line = reader . readLine ( ) ; } if ( line == null ) { throw new ExpectedTokenException ( "END SPRITESHEET" , line ) ; } }
te	8	public ArrayList < Point > checkMove2 ( Stack < TTTBoard > boards , char player ) { ArrayList < Point > winningSpots = new ArrayList < Point > ( ) ; ArrayList < TTTBoard > tempArray = new ArrayList < TTTBoard > ( ) ; while ( ! boards . isEmpty ( ) ) { TTTBoard aBoard = boards . pop ( ) ; ArrayList < Point > spots = aBoard . getEmptySpots ( ) ; char turn = getChar ( spots . size ( ) ) ; ArrayList < TTTBoard > tempArray2 = new ArrayList < TTTBoard > ( ) ; for ( int i = 0 ; i < spots . size ( ) ; i ++ ) { TTTBoard board = new TTTBoard ( aBoard ) ; board . getBoard ( ) [ spots . get ( i ) . x ] [ spots . get ( i ) . y ] = turn ; if ( spots . size ( ) < 6 ) { if ( board . checkWin ( ) ) { if ( turn == player ) { winningSpots . add ( board . getStart ( ) ) ; break ; } else { break ; } } else { tempArray2 . add ( board ) ; } } else { tempArray . add ( board ) ; } } if ( tempArray2 . size ( ) == spots . size ( ) ) { tempArray . addAll ( tempArray2 ) ; } } if ( winningSpots . isEmpty ( ) && tempArray . get ( 0 ) . getEmptySpots ( ) . size ( ) != 0 ) { boards . addAll ( tempArray ) ; winningSpots = checkMove2 ( boards , player ) ; } return winningSpots ; }
te	1	public void setCode ( CodeFragment code ) { if ( code == null ) code = new CodeFragment ( ) ; this . code = code ; }
te	8	private static Map < UnaryRule , List < String >> computeUnaryClosure ( Collection < UnaryRule > unaryRules ) { Map < UnaryRule , String > intermediateStates = new HashMap < UnaryRule , String > ( ) ; Counter < UnaryRule > pathCosts = new Counter < UnaryRule > ( ) ; Map < String , List < UnaryRule >> closedUnaryRulesByChild = new HashMap < String , List < UnaryRule >> ( ) ; Map < String , List < UnaryRule >> closedUnaryRulesByParent = new HashMap < String , List < UnaryRule >> ( ) ; Set < String > states = new HashSet < String > ( ) ; for ( UnaryRule unaryRule : unaryRules ) { relax ( pathCosts , intermediateStates , closedUnaryRulesByChild , closedUnaryRulesByParent , unaryRule , null , unaryRule . getScore ( ) ) ; states . add ( unaryRule . getParent ( ) ) ; states . add ( unaryRule . getChild ( ) ) ; } for ( String intermediateState : states ) { List < UnaryRule > incomingRules = closedUnaryRulesByChild . get ( intermediateState ) ; List < UnaryRule > outgoingRules = closedUnaryRulesByParent . get ( intermediateState ) ; if ( incomingRules == null || outgoingRules == null ) continue ; for ( UnaryRule incomingRule : incomingRules ) { for ( UnaryRule outgoingRule : outgoingRules ) { UnaryRule rule = new UnaryRule ( incomingRule . getParent ( ) , outgoingRule . getChild ( ) ) ; double newScore = pathCosts . getCount ( incomingRule ) * pathCosts . getCount ( outgoingRule ) ; relax ( pathCosts , intermediateStates , closedUnaryRulesByChild , closedUnaryRulesByParent , rule , intermediateState , newScore ) ; } } } for ( String state : states ) { UnaryRule selfLoopRule = new UnaryRule ( state , state ) ; relax ( pathCosts , intermediateStates , closedUnaryRulesByChild , closedUnaryRulesByParent , selfLoopRule , null , 1.0 ) ; } Map < UnaryRule , List < String >> closureMap = new HashMap < UnaryRule , List < String >> ( ) ; for ( UnaryRule unaryRule : pathCosts . keySet ( ) ) { unaryRule . setScore ( pathCosts . getCount ( unaryRule ) ) ; List < String > path = extractPath ( unaryRule , intermediateStates ) ; closureMap . put ( unaryRule , path ) ; } System . out . println ( "SIZE: " + closureMap . keySet ( ) . size ( ) ) ; return closureMap ; }
te	9X	public boolean connect ( SharingPeer peer ) { boolean retry = false ; boolean sentObfuscatedHandshake = false ; do { Socket socket = new Socket ( ) ; InetSocketAddress address = new InetSocketAddress ( peer . getIp ( ) , peer . getPort ( ) ) ; logger . info ( "Connecting to " + peer + "..." ) ; try { socket . connect ( address , 3 * 1000 ) ; } catch ( IOException ioe ) { logger . warn ( "Could not connect to " + peer + ": " + ioe . getMessage ( ) ) ; return false ; } try { byte [ ] remotePeerId = ( peer . hasPeerId ( ) ? peer . getPeerId ( ) . array ( ) : null ) ; if ( this . forceObfuscation ) sentObfuscatedHandshake = this . sendObfuscatedHandshake ( socket , remotePeerId , this . forceObfuscation ) ; else sentObfuscatedHandshake = this . sendHandshake ( socket , remotePeerId , peer . supportsObfuscation ( ) ) ; Handshake hs = this . validateHandshake ( socket , ( peer . hasPeerId ( ) ? peer . getPeerId ( ) . array ( ) : null ) ) ; this . fireNewPeerConnection ( socket , hs . getPeerId ( ) ) ; return true ; } catch ( ParseException pe ) { logger . info ( "Invalid handshake from " + this . socketRepr ( socket ) + ": " + pe . getMessage ( ) ) ; if ( sentObfuscatedHandshake && peer . supportsObfuscation ( ) ) { peer . supportsObfuscation ( false ) ; retry = true ; } try { socket . close ( ) ; } catch ( IOException e ) { } } catch ( IOException ioe ) { logger . info ( "An error occured while reading an incoming " + "handshake: " + ioe . getMessage ( ) ) ; try { if ( ! socket . isClosed ( ) ) socket . close ( ) ; } catch ( IOException e ) { } } } while ( retry ) ; return false ; }
te	1	public void divide ( int ncol , int nrow ) { canvasPads . setSize ( this . getSize ( ) . width , this . getSize ( ) . height , ncol , nrow ) ; int ncharts = canvasPads . getNPads ( ) ; series . clear ( ) ; for ( int loop = 0 ; loop < ncharts ; loop ++ ) { ScGroupSeries chart = new ScGroupSeries ( new ScRegion ( canvasPads . getX ( loop ) , canvasPads . getY ( loop ) , canvasPads . getWidth ( loop ) , canvasPads . getHeight ( loop ) ) ) ; series . add ( chart ) ; } }
te	2	public void simulateOneStep ( ) { step ++ ; startSickness ( startKans ) ; List < Actor > newActors = new ArrayList < Actor > ( ) ; for ( Iterator < Actor > it = actors . iterator ( ) ; it . hasNext ( ) ; ) { Actor actor = it . next ( ) ; actor . act ( newActors ) ; if ( ! actor . isActive ( ) ) { it . remove ( ) ; } } actors . addAll ( newActors ) ; statusUpdate ( ) ; }
te	2	int clip ( int t , int lo , int hi ) { return t < lo ? lo : t > hi ? hi : t ; }
te	1	public static GTHome getHome ( ) { if ( home == null ) home = new GTHomeImpl ( ) ; return home ; }
te	1	public int step ( int state , char c ) { if ( classmap == null ) return transitions [ state * points . length + getCharClass ( c ) ] ; else return transitions [ state * points . length + classmap [ c - Character . MIN_VALUE ] ] ; }
te	7	public static String RegexExtraction ( String patternStr , String data ) { Pattern pattern ; if ( patternStr == null || patternStr . length ( ) == 0 || patternStr . isEmpty ( ) ) return null ; if ( RegexManager . getInstance ( ) . patternList . containsKey ( patternStr ) ) { pattern = RegexManager . getInstance ( ) . patternList . get ( patternStr ) ; } else { pattern = Pattern . compile ( patternStr ) ; RegexManager . getInstance ( ) . patternList . put ( patternStr , pattern ) ; } Matcher matcher = pattern . matcher ( data ) ; String res = "" ; if ( matcher . find ( ) ) { if ( patternStr . startsWith ( ParameterSetting . REGXWORDPATTERN_V2 ) ) { String [ ] array = matcher . group ( 1 ) . split ( " " ) ; res = array [ array . length - 1 ] . replace (   ,   ) . trim ( ) ; } else { String [ ] array = matcher . group ( 1 ) . split ( " " ) ; res = array [ 0 ] . replace (   ,   ) . trim ( ) ; } } if ( StopwordsFilter . getInstance ( ) . isStopWords ( res ) ) return null ; else return res ; }
te	8	protected static byte discoverPortal ( IShape shape1 , IShape shape2 ) { getOriginRayDirection ( shape1 , shape2 ) ; MinkowskiDifference . getMinSupport ( e1 , shape1 , shape2 , e0 . v ) ; if ( e1 . v . . ( e0 . v ) >= 0 ) return - 1 ; dir . setCross ( e0 . v , e1 . v ) ; if ( dir . isZero ( ) ) { return 2 ; } MinkowskiDifference . getMaxSupport ( e2 , shape1 , shape2 , dir ) ; if ( e2 . v . . ( dir ) <= 0 ) return - 1 ; v1v0 . setSubtract ( e1 . v , e0 . v ) ; v2v0 . setSubtract ( e2 . v , e0 . v ) ; dir . setCross ( v1v0 , v2v0 ) ; if ( dir . . ( e0 . v ) > 0 ) { final Element e = e1 ; e1 = e2 ; e2 = e ; dir . invert ( ) ; Vector3f s = v1v0 ; v1v0 = v2v0 ; v2v0 = s ; } while ( true ) { MinkowskiDifference . getMaxSupport ( e3 , shape1 , shape2 , dir ) ; if ( e3 . v . . ( dir ) <= 0 ) return - 1 ; if ( temp . setCross ( e1 . v , e3 . v ) . . ( e0 . v ) < 0 ) { set ( e2 , e3 ) ; v2v0 . setSubtract ( e2 . v , e0 . v ) ; } else if ( temp . setCross ( e3 . v , e2 . v ) . . ( e0 . v ) < 0 ) { set ( e1 , e3 ) ; v1v0 . setSubtract ( e1 . v , e0 . v ) ; } else { return 0 ; } dir . setCross ( v1v0 , v2v0 ) ; } }
te	3	public static final Course readCourse ( File definitionFile ) { LOGGER . log ( Level . INFO , "Reading course from file '" + definitionFile + "'" ) ; JSONParser parser = new JSONParser ( ) ; JSONObject jsonObject = null ; try { jsonObject = ( JSONObject ) parser . parse ( new FileReader ( definitionFile ) ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } catch ( org . json . simple . parser . ParseException e ) { e . printStackTrace ( ) ; } Course course = new Course ( ( String ) jsonObject . get ( "name" ) , ( String ) jsonObject . get ( "address" ) , ( int ) ( ( long ) jsonObject . get ( "bestScore" ) ) , ( int ) ( ( long ) jsonObject . get ( "averageScore" ) ) , ( int ) ( ( long ) jsonObject . get ( "worstScore" ) ) , ( int ) ( ( long ) jsonObject . get ( "timesPlayed" ) ) , new ArrayList < Hole > ( ) , ( String ) jsonObject . get ( "userWithBestScore" ) , ( String ) jsonObject . get ( "description" ) ) ; LOGGER . log ( Level . INFO , "Created course '" + course . getName ( ) + "'" ) ; return course ; }
te	3	public boolean equals ( Object obj ) { boolean returnMe = true ; if ( ! obj . getClass ( ) . equals ( this . getClass ( ) ) ) { returnMe = false ; } else { if ( docID != ( ( Pair ) obj ) . docID ) { returnMe = false ; } else { if ( score != ( ( Pair ) obj ) . score ) { returnMe = false ; } } } return returnMe ; }
te	9X	private void drawMenu ( ) { int i = menuOffsetX ; int j = menuOffsetY ; int k = menuWidth ; int l = menuHeight + 1 ; DrawingArea . method338 ( menuOffsetY + 2 , menuHeight - 4 , 250 , 706a5e , menuWidth , menuOffsetX ) ; DrawingArea . method338 ( menuOffsetY + 1 , menuHeight - 2 , 250 , 706a5e , menuWidth - 2 , menuOffsetX + 1 ) ; DrawingArea . method338 ( menuOffsetY , menuHeight , 200 , 706a5e , menuWidth - 4 , menuOffsetX + 2 ) ; DrawingArea . method338 ( menuOffsetY + 1 , menuHeight - 2 , 250 , 2d2822 , menuWidth - 6 , menuOffsetX + 3 ) ; DrawingArea . method338 ( menuOffsetY + 2 , menuHeight - 4 , 250 , 2d2822 , menuWidth - 4 , menuOffsetX + 2 ) ; DrawingArea . method338 ( menuOffsetY + 3 , menuHeight - 6 , 250 , 2d2822 , menuWidth - 2 , menuOffsetX + 1 ) ; DrawingArea . method338 ( menuOffsetY + 19 , menuHeight - 22 , 250 , 524a3d , menuWidth - 4 , menuOffsetX + 2 ) ; DrawingArea . method338 ( menuOffsetY + 20 , menuHeight - 22 , 250 , 524a3d , menuWidth - 6 , menuOffsetX + 3 ) ; DrawingArea . method335 ( 112329 , j + 20 , k - 6 , l - 23 , 170 , i + 3 ) ; DrawingArea . fillPixels ( menuOffsetX + 3 , menuWidth - 6 , 1 , 2a291b , menuOffsetY + 2 ) ; DrawingArea . fillPixels ( menuOffsetX + 2 , menuWidth - 4 , 1 , 2a261b , menuOffsetY + 3 ) ; DrawingArea . fillPixels ( menuOffsetX + 2 , menuWidth - 4 , 1 , 252116 , menuOffsetY + 4 ) ; DrawingArea . fillPixels ( menuOffsetX + 2 , menuWidth - 4 , 1 , 211e15 , menuOffsetY + 5 ) ; DrawingArea . fillPixels ( menuOffsetX + 2 , menuWidth - 4 , 1 , 1e1b12 , menuOffsetY + 6 ) ; DrawingArea . fillPixels ( menuOffsetX + 2 , menuWidth - 4 , 1 , 1a170e , menuOffsetY + 7 ) ; DrawingArea . fillPixels ( menuOffsetX + 2 , menuWidth - 4 , 2 , 15120b , menuOffsetY + 8 ) ; DrawingArea . fillPixels ( menuOffsetX + 2 , menuWidth - 4 , 1 , 100d08 , menuOffsetY + 10 ) ; DrawingArea . fillPixels ( menuOffsetX + 2 , menuWidth - 4 , 1 , 090a04 , menuOffsetY + 11 ) ; DrawingArea . fillPixels ( menuOffsetX + 2 , menuWidth - 4 , 1 , 080703 , menuOffsetY + 12 ) ; DrawingArea . fillPixels ( menuOffsetX + 2 , menuWidth - 4 , 1 , 090a04 , menuOffsetY + 13 ) ; DrawingArea . fillPixels ( menuOffsetX + 2 , menuWidth - 4 , 1 , 070802 , menuOffsetY + 14 ) ; DrawingArea . fillPixels ( menuOffsetX + 2 , menuWidth - 4 , 1 , 090a04 , menuOffsetY + 15 ) ; DrawingArea . fillPixels ( menuOffsetX + 2 , menuWidth - 4 , 1 , 070802 , menuOffsetY + 16 ) ; DrawingArea . fillPixels ( menuOffsetX + 2 , menuWidth - 4 , 1 , 090a04 , menuOffsetY + 17 ) ; DrawingArea . fillPixels ( menuOffsetX + 2 , menuWidth - 4 , 1 , 2a291b , menuOffsetY + 18 ) ; DrawingArea . fillPixels ( menuOffsetX + 3 , menuWidth - 6 , 1 , 564943 , menuOffsetY + 19 ) ; chatTextDrawingArea . method385 ( c6b895 , "Choose Option" , menuOffsetY + 14 , menuOffsetX + 3 ) ; int j1 = super . mouseX ; int k1 = super . mouseY ; if ( menuScreenArea == 0 ) { j1 -= 4 ; k1 -= 4 ; } if ( menuScreenArea == 1 ) { j1 -= 519 ; k1 -= 168 ; } if ( menuScreenArea == 2 ) { j1 -= 17 ; k1 -= 338 ; } if ( menuScreenArea == 3 ) { j1 -= 516 ; k1 -= 0 ; } for ( int l1 = 0 ; l1 < menuActionRow ; l1 ++ ) { int i2 = j + 31 + ( menuActionRow - 1 - l1 ) * 15 ; int j2 = c6b895 ; if ( j1 > i && j1 < i + k && k1 > i2 - 13 && k1 < i2 + 3 ) { DrawingArea . drawPixels ( 15 , i2 - 11 , i + 3 , 26566C , menuWidth - 6 ) ; j2 = eee5c6 ; } chatTextDrawingArea . method389 ( true , i + 4 , AAA184 , menuActionName [ l1 ] , i2 + 1 ) ; } }
te	6	public Settings ( JPanel content ) { JPanel theContent = new JPanel ( new GridLayout ( 12 , 1 , 0 , 5 ) ) ; auxButton . setFocusPainted ( false ) ; radButton . setFocusPainted ( false ) ; cdButton . setFocusPainted ( false ) ; climateLabel = new JLabel ( "Climate" ) ; climateLabel . setFont ( new Font ( "Sans Serif" , Font . BOLD , 30 ) ) ; climateControl . setMinorTickSpacing ( 1 ) ; Hashtable labelTable = new Hashtable ( ) ; labelTable . put ( new Integer ( 0 ) , new JLabel ( "Cold" ) ) ; labelTable . put ( new Integer ( CLIMATE_MAX ) , new JLabel ( "Hot" ) ) ; climateControl . setLabelTable ( labelTable ) ; climateControl . setPaintLabels ( true ) ; ventLabel = new JLabel ( "Ventilation Fan" ) ; ventLabel . setFont ( new Font ( "Sans Serif" , Font . BOLD , 30 ) ) ; ventButton . setText ( "Off" ) ; ventButton . setBackground ( Color . decode ( "#FF3333" ) ) ; ventButton . addActionListener ( new ActionListener ( ) { boolean active = false ; public void actionPerformed ( ActionEvent e ) { active = active == true ? false : true ; if ( active == true ) { ventButton . setText ( "On" ) ; ventButton . setBackground ( Color . decode ( "#92CD00" ) ) ; } else { ventButton . setText ( "Off" ) ; ventButton . setBackground ( Color . decode ( "#FF3333" ) ) ; } } } ) ; soundLabel = new JLabel ( "Sound" ) ; soundLabel . setFont ( new Font ( "Sans Serif" , Font . BOLD , 30 ) ) ; radioLabel = new JLabel ( "Volume" ) ; radioLabel . setFont ( new Font ( "Sans Serif" , Font . BOLD , 16 ) ) ; frequency . setText ( "107.10" ) ; musicCards . add ( radioCard , "Radio controller" ) ; musicCards . add ( cdCard , "CD controller" ) ; musicCards . add ( auxCard , "AUX controller" ) ; Hashtable volLabelTable = new Hashtable ( ) ; volLabelTable . put ( new Integer ( 0 ) , new JLabel ( "0" ) ) ; volLabelTable . put ( new Integer ( 10 ) , new JLabel ( "1" ) ) ; volLabelTable . put ( new Integer ( 20 ) , new JLabel ( "2" ) ) ; volLabelTable . put ( new Integer ( 30 ) , new JLabel ( "3" ) ) ; volLabelTable . put ( new Integer ( 40 ) , new JLabel ( "4" ) ) ; volLabelTable . put ( new Integer ( 50 ) , new JLabel ( "5" ) ) ; volLabelTable . put ( new Integer ( 60 ) , new JLabel ( "6" ) ) ; volLabelTable . put ( new Integer ( 70 ) , new JLabel ( "7" ) ) ; volLabelTable . put ( new Integer ( 80 ) , new JLabel ( "8" ) ) ; volLabelTable . put ( new Integer ( 90 ) , new JLabel ( "9" ) ) ; volLabelTable . put ( new Integer ( 100 ) , new JLabel ( "10" ) ) ; volLabelTable . put ( new Integer ( 110 ) , new JLabel ( "11" ) ) ; radVolControl . setLabelTable ( volLabelTable ) ; radVolControl . setPaintLabels ( true ) ; freqButton . setText ( "AM" ) ; freqButton . setFocusPainted ( false ) ; freqButton . setBackground ( Color . decode ( "#393939" ) ) ; freqButton . setForeground ( Color . decode ( "#FFFFFF" ) ) ; freqButton . addActionListener ( new ActionListener ( ) { boolean active = false ; public void actionPerformed ( ActionEvent e ) { active = active == true ? false : true ; if ( active == true ) { freqButton . setText ( "FM" ) ; } else { freqButton . setText ( "AM" ) ; } } } ) ; radButton . setBackground ( Color . decode ( "#92CD00" ) ) ; auxButton . setBackground ( Color . decode ( "#FF3333" ) ) ; cdButton . setBackground ( Color . decode ( "#FF3333" ) ) ; freqLabel = new JLabel ( "Frequency:" ) ; freqLabel . setFont ( new Font ( "Sans Serif" , Font . BOLD , 16 ) ) ; JPanel musicButtons = new JPanel ( new GridLayout ( 1 , 3 ) ) ; radButton . setText ( "RADIO" ) ; radButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { radButton . setBackground ( Color . decode ( "#92CD00" ) ) ; auxButton . setBackground ( Color . decode ( "#FF3333" ) ) ; cdButton . setBackground ( Color . decode ( "#FF3333" ) ) ; CardLayout cl = ( CardLayout ) ( musicCards . getLayout ( ) ) ; cl . show ( musicCards , "Radio controller" ) ; } } ) ; musicButtons . add ( radButton ) ; auxButton . setText ( "AUX" ) ; auxButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { auxButton . setBackground ( Color . decode ( "#92CD00" ) ) ; radButton . setBackground ( Color . decode ( "#FF3333" ) ) ; cdButton . setBackground ( Color . decode ( "#FF3333" ) ) ; CardLayout cl = ( CardLayout ) ( musicCards . getLayout ( ) ) ; cl . show ( musicCards , "AUX controller" ) ; } } ) ; musicButtons . add ( auxButton ) ; cdButton . setText ( "CD" ) ; cdButton . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { cdButton . setBackground ( Color . decode ( "#92CD00" ) ) ; auxButton . setBackground ( Color . decode ( "#FF3333" ) ) ; radButton . setBackground ( Color . decode ( "#FF3333" ) ) ; CardLayout cl = ( CardLayout ) ( musicCards . getLayout ( ) ) ; cl . show ( musicCards , "CD controller" ) ; } } ) ; musicButtons . add ( cdButton ) ; radioCard . add ( freqLabel ) ; radioCard . add ( frequency ) ; radioCard . add ( freqButton ) ; auxCard . add ( new JLabel ( "AUX Connected..." ) ) ; JPanel cdButtons = new JPanel ( new GridLayout ( 1 , 6 ) ) ; JButton playBtn = new JButton ( "Play" ) ; playBtn . setFocusPainted ( false ) ; playBtn . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { cdStatusLabel . setText ( "Playing " + currentSongStr + "..." ) ; } } ) ; cdButtons . add ( playBtn ) ; JButton pauseBtn = new JButton ( "Pause" ) ; pauseBtn . setFocusPainted ( false ) ; pauseBtn . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { cdStatusLabel . setText ( currentSongStr + " Paused" ) ; } } ) ; cdButtons . add ( pauseBtn ) ; JButton stopBtn = new JButton ( "Stop" ) ; stopBtn . setFocusPainted ( false ) ; stopBtn . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { cdStatusLabel . setText ( currentSongStr + " Stopped" ) ; } } ) ; cdButtons . add ( stopBtn ) ; JButton prevBtn = new JButton ( "PREV" ) ; prevBtn . setFocusPainted ( false ) ; prevBtn . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { if ( currentSongStr . equals ( "Funky Town" ) ) { currentSongStr = "Bohemian Rhapsody" ; } else { currentSongStr = "Funky Town" ; } cdStatusLabel . setText ( "Playing " + currentSongStr + "..." ) ; } } ) ; cdButtons . add ( prevBtn ) ; JButton nextBtn = new JButton ( "next" ) ; nextBtn . setFocusPainted ( false ) ; nextBtn . addActionListener ( new ActionListener ( ) { public void actionPerformed ( ActionEvent e ) { if ( currentSongStr . equals ( "Funky Town" ) ) { currentSongStr = "Bohemian Rhapsody" ; } else { currentSongStr = "Funky Town" ; } cdStatusLabel . setText ( "Playing " + currentSongStr + "..." ) ; } } ) ; cdButtons . add ( nextBtn ) ; JButton eject = new JButton ( "Eject" ) ; eject . setFocusPainted ( false ) ; cdButtons . add ( eject ) ; cdCard . add ( cdButtons ) ; cdCard . add ( cdStatusLabel ) ; settings . setFont ( new Font ( "Sans Serif" , Font . BOLD , 30 ) ) ; theContent . add ( settings ) ; theContent . add ( climateLabel ) ; theContent . add ( climateControl ) ; theContent . add ( ventLabel ) ; theContent . add ( ventButton ) ; theContent . add ( soundLabel ) ; theContent . add ( radioLabel ) ; theContent . add ( radVolControl ) ; theContent . add ( musicButtons ) ; theContent . add ( musicCards ) ; add ( theContent ) ; }
te	9X	public void storePast ( PastData past ) { if ( past . zip . equalsIgnoreCase ( "denver co" ) ) past . zip = "80201" ; String prefix = past . zip + " " + timeFormat . format ( past . date ) + " " + past . today + " " + past . occurredDate ; if ( past . overallPast . high != null || past . overallPast . precip != null ) { String str = prefix ; str = str + " " ; if ( past . overallPast . high != null ) str = str + past . overallPast . high . toString ( ) ; str = str + " " ; if ( past . overallPast . precip != null ) str = str + past . overallPast . precip . toString ( ) ; str = str + " " ; DAout . println ( str ) ; } if ( past . hourlyPast . length != 0 ) { for ( int i = 0 ; i < past . hourlyPast . length ; i ++ ) { String str = prefix ; str = str + " " + past . hourlyPast [ i ] . hour ; str = str + " " ; if ( past . hourlyPast [ i ] . temp != null ) str = str + past . hourlyPast [ i ] . temp . toString ( ) ; str = str + " " ; if ( past . hourlyPast [ i ] . conditions != null ) str = str + past . hourlyPast [ i ] . conditions ; str = str + " " ; if ( past . hourlyPast [ i ] . precip != null ) str = str + past . hourlyPast [ i ] . precip . toString ( ) ; str = str + " " ; HAout . println ( str ) ; } } }
te	7	public static boolean searchAndAdd ( TrieNode root , TrieNode prev , char [ ] str , int index ) { if ( root == null ) { return false ; } if ( root . childLinks == null ) { insertNode ( root , str , 0 ) ; return false ; } if ( index < str . length ) { for ( TrieNode child : root . childLinks ) { if ( child . alphabet == str [ index ] ) { return searchAndAdd ( child , root , str , ++ index ) ; } } } if ( index == str . length && prev . endOfWord ) { return true ; } else { insertNode ( prev , str , index ) ; return false ; } }
te	9X	@ Override public float [ ] getFloatData ( float [ ] a , long startPos , long endPos , long step ) { if ( startPos < 0 || startPos >= length ) { throw new ArrayIndexOutOfBoundsException ( "startPos < 0 || startPos >= length" ) ; } if ( endPos < 0 || endPos > length || endPos < startPos ) { throw new ArrayIndexOutOfBoundsException ( "endPos < 0 || endPos > length || endPos < startPos" ) ; } if ( step < 1 ) { throw new IllegalArgumentException ( "step < 1" ) ; } long len = ( long ) Math . ceil ( ( endPos - startPos ) / ( double ) step ) ; if ( len > getMaxSizeOf32bitArray ( ) ) { return null ; } else { float [ ] out ; if ( a != null && a . length >= len ) { out = a ; } else { out = new float [ ( int ) len ] ; } int idx = 0 ; if ( ptr != 0 ) { for ( long i = startPos ; i < endPos ; i += step ) { out [ idx ++ ] = ( float ) Utilities . UNSAFE . getInt ( ptr + sizeof * i ) ; } } else { if ( isConstant ( ) ) { for ( long i = startPos ; i < endPos ; i += step ) { out [ idx ++ ] = ( float ) data [ 0 ] ; } } else { for ( long i = startPos ; i < endPos ; i += step ) { out [ idx ++ ] = ( float ) data [ ( int ) i ] ; } } } return out ; } }
te	2	@ Test public void testGet ( ) { for ( int i = 0 ; i < A . length ; ++ i ) { for ( int j = 0 ; j < A [ 0 ] . length ; ++ j ) { assertTrue ( matrixA . get ( i , j ) . equals ( A [ i ] [ j ] ) ) ; } } }
te	0	@ Override public List < Apontamento > obterPorOrdemServico ( int ordemServicoId ) { return session . createQuery ( "from Apontamento where OrdemServicoId = :ordemServicoId" ) . setString ( "ordemServicoId" , String . valueOf ( ordemServicoId ) ) . list ( ) ; }
te	6	public static void main ( String [ ] args ) throws Exception { long start = System . currentTimeMillis ( ) ; Scanner in = new Scanner ( new File ( "d:\\ProgramDATA\\2013\\Fair and Square\\C-large-practice-1.in" ) ) ; System . setOut ( new PrintStream ( new File ( "d:\\ProgramDATA\\2013\\Fair and Square\\C-large-practice1.out" ) ) ) ; int NumCase = in . nextInt ( ) ; in . nextLine ( ) ; for ( int curCase = 1 ; curCase <= NumCase ; curCase ++ ) { long min , max ; min = in . nextLong ( ) ; max = in . nextLong ( ) ; int count = 0 ; long sqrt_min = ( long ) Math . sqrt ( min ) , sqrt_max = ( long ) Math . sqrt ( max ) ; if ( min > 1 && min < 4 ) sqrt_min += 1 ; for ( long i = sqrt_min ; i <= sqrt_max ; i ++ ) { if ( IsPalin ( i ) && IsPalin ( i * i ) ) { count ++ ; } } System . out . println ( " Case #" + curCase + ": " + count ) ; } long end = System . currentTimeMillis ( ) ; System . out . println ( "\u8FD0\u884C\u65F6\u95F4\uFF1A" + ( end - start ) + "ms" ) ; }
te	8	public static int evaluate ( DraughtsState ds , boolean white ) { int [ ] pieces = ds . getPieces ( ) ; int total = 0 ; for ( int piece : pieces ) { switch ( piece ) { case 0 : total += 0 ; break ; case 1 : total += 100 ; break ; case 2 : total -= 100 ; break ; case 3 : total += 300 ; break ; case 4 : total -= 300 ; break ; case 5 : total += 0 ; break ; } } if ( ! white ) { total = - total ; } return total ; }
te	1	public void set_wheelchair_boarding ( String in ) { try { _wheelchair_boarding = Integer . parseInt ( in ) ; } catch ( NumberFormatException e ) { ; } }
te	5	public void clicked ( Vec2f gamePosition ) { Vec2i mapPosition = new Vec2i ( ( int ) ( gamePosition . x / SQUARE_SIZE ) , ( int ) ( gamePosition . y / SQUARE_SIZE ) ) ; if ( isPlayerUnit ( mapPosition ) ) { Unit unit = units . get ( mapPosition ) ; unit . select ( ) ; if ( selected != null && ! selected . equals ( unit ) ) { selected . unselect ( ) ; } selected = unit ; } else { if ( selected != null && isPassable ( mapPosition ) ) { getPathTo ( selected , mapPosition ) ; } } }
te	4	public static void compute_first_sets ( ) throws internal_error { boolean change = true ; Enumeration n ; Enumeration p ; non_terminal nt ; production prod ; terminal_set prod_first ; while ( change ) { change = false ; for ( n = all ( ) ; n . hasMoreElements ( ) ; ) { nt = ( non_terminal ) n . nextElement ( ) ; for ( p = nt . productions ( ) ; p . hasMoreElements ( ) ; ) { prod = ( production ) p . nextElement ( ) ; prod_first = prod . check_first_set ( ) ; if ( ! prod_first . is_subset_of ( nt . _first_set ) ) { change = true ; nt . _first_set . add ( prod_first ) ; } } } } }
te	5	public void wc ( MainClass mc , Encounter e ) { int x = mc . getXPos ( ) ; int y = mc . getYPos ( ) ; int k = e . getKeyPress ( ) ; if ( x >= 300 && x <= 450 ) { if ( y >= 40 && y <= 140 ) { e . win = false ; MainClass . getPlayer ( ) . addXP ( e . m . calculateXP ( ) ) ; MainClass . getPlayer ( ) . addGold ( e . m . getGold ( ) ) ; MainClass . getPlayer ( ) . setCurrentHP ( e . p . getCurrentHP ( ) ) ; mc . getMapHandler ( ) . getTheMap ( ) . getTile ( e . m . getCurTileX ( ) , e . m . getCurTileY ( ) ) . clearChar1 ( ) ; mc . getMapHandler ( ) . checkXP = true ; mc . setScreen ( "Map" ) ; } } else if ( k == 10 ) { e . win = false ; e . setKeyPress ( 0 ) ; MainClass . getPlayer ( ) . addXP ( e . m . calculateXP ( ) ) ; MainClass . getPlayer ( ) . addGold ( e . m . getGold ( ) ) ; MainClass . getPlayer ( ) . setCurrentHP ( e . p . getCurrentHP ( ) ) ; mc . getMapHandler ( ) . getTheMap ( ) . getTile ( e . m . getCurTileX ( ) , e . m . getCurTileY ( ) ) . clearChar1 ( ) ; mc . getMapHandler ( ) . checkXP = true ; mc . setScreen ( "Map" ) ; } }
te	9X	@ Override public void run ( ) { try { while ( Settling . this . running ) { Thread . sleep ( 1 ) ; } } catch ( InterruptedException e ) { } }
te	2	private JPanel pnlCrear ( ) { lblNuevoId = new JLabel ( "Identificaci\u00F3n" ) ; lblNuevoNombre = new JLabel ( "Nombre" ) ; lblNuevoApellido = new JLabel ( "Apellido" ) ; lblNuevoTelefono = new JLabel ( "Tel\u00E9fono" ) ; lblNuevoParentesco = new JLabel ( "Parentesco" ) ; txtNuevoId = new JTextField ( ) ; txtNuevoNombre = new JTextField ( ) ; txtNuevoApellido = new JTextField ( ) ; txtNuevoTelefono = new JTextField ( ) ; txtNuevoParentesco = new JTextField ( ) ; btnNuevoElegir = new JButton ( "Elegir" ) ; btnNuevoElegir . addActionListener ( this ) ; switch ( tipo ) { case SELECCIONAR_DUENIO : btnNuevoElegir . setActionCommand ( ELEGIR_DUENIO_NUEVO ) ; break ; case SELECCIONAR_RESPONSABLE : btnNuevoElegir . setActionCommand ( ELEGIR_RESPONSABLE_NUEVO ) ; break ; } ImageIcon iconElegir = new ImageIcon ( getClass ( ) . getResource ( "/conjunto/views/icons/check.png" ) ) ; Image imgElegir = iconElegir . getImage ( ) . getScaledInstance ( - 1 , 22 , Image . SCALE_SMOOTH ) ; iconElegir . setImage ( imgElegir ) ; btnNuevoElegir . setIcon ( iconElegir ) ; Dimension cmps = new Dimension ( 180 , 27 ) ; lblNuevoId . setPreferredSize ( cmps ) ; lblNuevoNombre . setPreferredSize ( cmps ) ; lblNuevoApellido . setPreferredSize ( cmps ) ; lblNuevoTelefono . setPreferredSize ( cmps ) ; lblNuevoParentesco . setPreferredSize ( cmps ) ; txtNuevoId . setPreferredSize ( cmps ) ; txtNuevoNombre . setPreferredSize ( cmps ) ; txtNuevoApellido . setPreferredSize ( cmps ) ; txtNuevoTelefono . setPreferredSize ( cmps ) ; txtNuevoParentesco . setPreferredSize ( cmps ) ; btnNuevoElegir . setPreferredSize ( new Dimension ( 150 , 30 ) ) ; JPanel pnl = new JPanel ( new FlowLayout ( ) ) ; pnl . setBorder ( BorderFactory . createTitledBorder ( "Crear uno nuevo" ) ) ; pnl . setPreferredSize ( new Dimension ( 200 , - 1 ) ) ; pnl . add ( lblNuevoId ) ; pnl . add ( txtNuevoId ) ; pnl . add ( lblNuevoNombre ) ; pnl . add ( txtNuevoNombre ) ; pnl . add ( lblNuevoApellido ) ; pnl . add ( txtNuevoApellido ) ; pnl . add ( lblNuevoTelefono ) ; pnl . add ( txtNuevoTelefono ) ; pnl . add ( lblNuevoParentesco ) ; pnl . add ( txtNuevoParentesco ) ; pnl . add ( btnNuevoElegir ) ; return pnl ; }
te	3	public Code getCodeByDescription ( String description ) { for ( Code code : codes ) { Map < String , String > localizedStrings = code . getDescription ( ) . getLocalizedStrings ( ) ; for ( String key : localizedStrings . keySet ( ) ) { if ( localizedStrings . get ( key ) . equalsIgnoreCase ( description ) ) { return code ; } } } return null ; }
te	2	private void closeSocket ( ) { try { if ( socket != null ) { socket . close ( ) ; socket = null ; } } catch ( IOException e ) { logger . log ( Level . SEVERE , "Could not close network socket: " + e . getMessage ( ) ) ; } socket = null ; }
te	2	static List < VcsCommit > parseCommits ( String xml ) { try { CommitReadingHandler commitReadingHandler = new CommitReadingHandler ( ) ; SAXParserFactory parserFactory = SAXParserFactory . newInstance ( ) ; XMLReader xmlReader = parserFactory . newSAXParser ( ) . getXMLReader ( ) ; xmlReader . setContentHandler ( commitReadingHandler ) ; xmlReader . parse ( new InputSource ( new StringReader ( xml ) ) ) ; return commitReadingHandler . commits ; } catch ( SAXException e ) { throw new RuntimeException ( "Failed to parse xml: " + xml , e ) ; } catch ( ParserConfigurationException | IOException e ) { throw new RuntimeException ( e ) ; } }
te	4	private void setEventLimitFlags ( ) { Settings_Event . EVENT_LIMIT_REACHED_LOW = ( Settings_Event . RUNNING_EVENTS_LOW >= Settings_Event . MAX_RUNNING_EVENTS_LOW ) ? true : false ; Settings_Event . EVENT_LIMIT_REACHED_MID = ( Settings_Event . RUNNING_EVENTS_MID >= Settings_Event . MAX_RUNNING_EVENTS_MID ) ? true : false ; Settings_Event . EVENT_LIMIT_REACHED_HIGH = ( Settings_Event . RUNNING_EVENTS_HIGH >= Settings_Event . MAX_RUNNING_EVENTS_HIGH ) ? true : false ; Settings_Event . EVENT_LIMIT_REACHED_ALL = ( Settings_Event . RUNNING_EVENTS_ALL >= Settings_Event . MAX_RUNNING_EVENTS_ALL ) ? true : false ; }
te	1	@ Override public E actual ( ) { if ( actual == null ) { throw new NullPointerException ( "Error: no se puede acceder el dato actual!" ) ; } return actual . getDato ( ) ; }
te	4	public void initFeatureAlphabets ( DependencyInstance inst ) { getFeatureVector ( inst ) ; int n = inst . length ; for ( SemanticFrame frame : inst . frames ) { int p = frame . predid ; createWordFeatureVector ( inst , p ) ; int [ ] args = frame . arglbids ; for ( int a = 0 ; a < n ; ++ a ) { boolean isValid = isValidPredAugPair ( inst , p , a ) ; if ( args [ a ] >= 0 && isValid ) { int r = args [ a ] ; createContextFeatureVector ( inst , p , a , r ) ; createPathFeatureVector ( inst , p , a , r ) ; createWordFeatureVector ( inst , a ) ; } } } }
te	6	@ SuppressWarnings ( "rawtypes" ) public static List < String > getClassNamesImplementingInterface ( class interf , String basePackage ) { List < String > classNames = new ArrayList < String > ( ) ; try { class [ ] result = getClasses ( basePackage ) ; for ( class c : result ) { if ( ! Modifier . isAbstract ( c . getModifiers ( ) ) ) { for ( class implementingInterface : c . getInterfaces ( ) ) { if ( implementingInterface . getName ( ) . equals ( interf . getName ( ) ) ) { classNames . add ( c . getCanonicalName ( ) ) ; } } } } } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return classNames ; }
te	4	private void initializeTokens ( ) { tokens = new Token [ 21 ] [ 10 ] ; for ( int i = 0 ; i < tokens . length ; i ++ ) { for ( int j = 0 ; j < tokens [ i ] . length ; j ++ ) { tokens [ i ] [ j ] = new Token ( ) ; } } nextTokens1 = new TokenNext [ 2 ] [ 4 ] ; nextTokens2 = new TokenNext [ 2 ] [ 4 ] ; nextTokens3 = new TokenNext [ 2 ] [ 4 ] ; holdTokens = new TokenNext [ 2 ] [ 4 ] ; for ( int i = 0 ; i < nextTokens1 . length ; i ++ ) { for ( int j = 0 ; j < nextTokens1 [ i ] . length ; j ++ ) { nextTokens1 [ i ] [ j ] = new TokenNext ( ) ; nextTokens2 [ i ] [ j ] = new TokenNext ( ) ; nextTokens3 [ i ] [ j ] = new TokenNext ( ) ; holdTokens [ i ] [ j ] = new TokenNext ( ) ; } } currentTokens = new int [ 4 ] [ 2 ] ; directingTokens = new int [ 4 ] [ 2 ] ; nextTokens3Position = new int [ 4 ] [ 2 ] ; nextTokens2Position = new int [ 4 ] [ 2 ] ; nextTokens1Position = new int [ 4 ] [ 2 ] ; holdTokensPosition = new int [ 4 ] [ 2 ] ; }
te	0	public void setPrpMoaTipo ( String prpMoaTipo ) { this . prpMoaTipo = prpMoaTipo ; }
te	9X	public String SimplifyPath ( String path ) { if ( path == null || path . length ( ) == 0 ) return null ; if ( path . charAt ( 0 ) != / ) return path ; List < String > buf = new ArrayList < String > ( ) ; int pathLen = path . length ( ) ; int start = 0 ; int end ; while ( true ) { while ( start < pathLen && path . charAt ( start ) == / ) start ++ ; if ( start == pathLen ) break ; for ( end = start ; end < pathLen ; end ++ ) { if ( path . charAt ( end ) == / ) break ; } String curr = path . substring ( start , end ) ; if ( curr . equals ( "." ) ) { } else if ( curr . equals ( ".." ) ) { if ( buf . size ( ) > 0 ) buf . remove ( buf . size ( ) - 1 ) ; } else { buf . add ( curr ) ; } start = end ; } if ( buf . size ( ) == 0 ) return "/" ; else { StringBuilder builder = new StringBuilder ( ) ; for ( String dir : buf ) { builder . append ( / ) ; builder . append ( dir ) ; } return builder . toString ( ) ; } }
te	3	private void compact ( ) { int from = 0 ; int to = 0 ; while ( from < this . capacity ) { Object key = this . list [ from ] ; long usage = age ( this . ticks [ from ] ) ; if ( usage > 0 ) { this . ticks [ to ] = usage ; this . list [ to ] = key ; this . map . put ( key , to ) ; to += 1 ; } else { this . map . remove ( key ) ; } from += 1 ; } if ( to < this . capacity ) { this . length = to ; } else { this . map . clear ( ) ; this . length = 0 ; } this . power = 0 ; }
te	0	@ Override public T evaluate ( T x , T y , T z ) throws AbstractException { T resFirst = first . evaluate ( x , y , z ) ; T resSecond = second . evaluate ( x , y , z ) ; return resFirst . sum ( resSecond ) ; }
te	7	@ Test public void testNavigateShowDescending ( ) { for ( int i = MockFileSystem . NUM_SEASONS ; i > 0 ; i -- ) { for ( int j = MockFileSystem . NUM_EPISODES ; j > 0 ; j -- ) { int season = ( j == 1 ) ? i - 1 : i ; int expEp = ( j == 1 ) ? MockFileSystem . NUM_EPISODES : j - 1 ; EpisodeMatch toNavigate = new EpisodeMatch ( "Scrubs" , i , j ) ; EpisodeMatch expResult = new EpisodeMatch ( season , expEp ) ; EpisodeMatch result = episode . navigate ( toNavigate , EpisodeNavigator . Pointer . PREV ) ; if ( result == null && i == 1 && j == 1 ) { return ; } System . out . println ( "Navigating: " + toNavigate + " : to : " + expResult ) ; assertEquals ( expResult . getSeason ( ) , result . getSeason ( ) ) ; assertEquals ( expResult . getEpisodes ( ) , result . getEpisodes ( ) ) ; } } }
te	3	protected int readStringHeaderImpl ( ) throws IOException , UBJFormatException { byte type = checkType ( "STRING" , STRING_COMPACT , STRING ) ; int length = 0 ; switch ( type ) { case STRING_COMPACT : length = read ( ) ; break ; case STRING : length = readInt32Impl ( ) ; break ; } if ( length < 0 ) throw new UBJFormatException ( pos , "Encountered a negative (invalid) length of [" + length + "] specified for the STRING value at stream position " + pos + ". Length must be >= 0." ) ; return length ; }
te	3	@ EventHandler ( priority = EventPriority . LOWEST ) public void lever ( PlayerInteractEvent event ) { Action action = event . getAction ( ) ; if ( action == Action . LEFT_CLICK_BLOCK || action == Action . RIGHT_CLICK_BLOCK ) { if ( event . getClickedBlock ( ) . getType ( ) == Material . LEVER ) { prevent ( event , event . getPlayer ( ) , "lever interact" ) ; } } }
te	7	private JPanel createFillInTheBlanksQuestion ( ) { _questionLabel . setText ( _fillInTheBlanks . getAnswer ( ) ) ; final SpringLayout springLayout = new SpringLayout ( ) ; final JPanel jPanel = new JPanel ( springLayout ) ; _optionsStrings = _fillInTheBlanks . getBlanks ( ) ; final int [ ] randomList = MathUtilities . generateRandomArray ( _optionsStrings . size ( ) ) ; _answers = new ArrayList < String > ( ) ; for ( int x = 0 ; x < _optionsStrings . size ( ) ; x ++ ) { final String value = _optionsStrings . get ( randomList [ x ] ) ; _answers . add ( _optionsStrings . get ( _optionsStrings . indexOf ( value ) ) ) ; } _optionComboBoxes = new ArrayList < JComboBox > ( ) ; for ( int x = 0 ; x < _optionsStrings . size ( ) ; x ++ ) { final JLabel label = new JLabel ( "Choose #" ) ; final String choice = _optionsStrings . get ( randomList [ x ] ) . toLowerCase ( ) ; springLayout . putConstraint ( SpringLayout . WEST , label , 15 , SpringLayout . WEST , jPanel ) ; springLayout . putConstraint ( SpringLayout . NORTH , label , 45 + x * 35 , SpringLayout . NORTH , jPanel ) ; jPanel . add ( label ) ; Object [ ] choices = new Object [ _optionsStrings . size ( ) + 1 ] ; choices [ 0 ] = "--" ; for ( int y = 0 ; y < choices . length - 1 ; y ++ ) { choices [ y + 1 ] = "[" + y + "]" ; } final JComboBox combobox = new JComboBox ( choices ) ; springLayout . putConstraint ( SpringLayout . WEST , combobox , 10 , SpringLayout . EAST , label ) ; springLayout . putConstraint ( SpringLayout . NORTH , combobox , - 20 , SpringLayout . SOUTH , label ) ; _optionComboBoxes . add ( combobox ) ; combobox . addActionListener ( new ActionListener ( ) { @ Override public void actionPerformed ( final ActionEvent arg0 ) { String question = "" ; if ( _choicesMade . containsKey ( choice ) ) { _choicesMade . remove ( choice ) ; } String begin = "Question #" + new Integer ( _questionData . getQuestionNumber ( ) ) . toString ( ) + ": " ; question = begin + _questionData . getQuestionString ( ) ; final Set < String > keys = _choicesMade . keySet ( ) ; for ( final String key : keys ) { question = replace ( _choicesMade . get ( key ) , question , key ) ; } final int indexToLookFor = combobox . getSelectedIndex ( ) - 1 ; if ( indexToLookFor >= 0 ) { _choicesMade . put ( choice , "[" + indexToLookFor + "]" ) ; question = replace ( "[" + indexToLookFor + "]" , question , choice ) ; } _beginLabel . setText ( question ) ; } private String replace ( final String needle , final String haystack , final String newNeedle ) { String result = haystack ; while ( result . indexOf ( needle ) != - 1 ) { result = result . replace ( needle , newNeedle ) ; } return result ; } } ) ; jPanel . add ( combobox ) ; final JLabel option = new JLabel ( choice ) ; springLayout . putConstraint ( SpringLayout . WEST , option , 10 , SpringLayout . EAST , combobox ) ; springLayout . putConstraint ( SpringLayout . NORTH , option , 1 , SpringLayout . NORTH , combobox ) ; jPanel . add ( option ) ; } final JLabel temp = new JLabel ( ) ; springLayout . putConstraint ( SpringLayout . EAST , jPanel , 600 , SpringLayout . WEST , temp ) ; springLayout . putConstraint ( SpringLayout . SOUTH , jPanel , 250 , SpringLayout . SOUTH , temp ) ; jPanel . setOpaque ( true ) ; return jPanel ; }
te	0	public int [ ] getWarps ( ) { return new int [ ] { 0 , 0 , 0 , 0 } ; }
te	7	void updateGui ( String fieldname ) { Object fieldval = fieldvalues . get ( fieldname ) ; Object fieldcom = fieldcomponents . get ( fieldname ) ; String fieldtype = ( String ) fieldtypes . get ( fieldname ) ; if ( fieldcom instanceof JCheckBox ) { ( ( JCheckBox ) fieldcom ) . setSelected ( ( ( boolean ) fieldval ) . booleanValue ( ) ) ; } else if ( fieldcom instanceof JColorChooser ) { JColorChooser jcc = ( JColorChooser ) fieldcom ; jcc . setColor ( ( Color ) fieldval ) ; } else if ( fieldcom instanceof KeyField ) { ( ( KeyField ) fieldcom ) . setValue ( ( ( Integer ) fieldval ) . intValue ( ) ) ; } else if ( fieldcom instanceof JTextField ) { JTextField textfield = ( JTextField ) fieldcom ; if ( fieldtype . equals ( "int" ) || fieldtype . equals ( "double" ) ) { textfield . setText ( "" + fieldval ) ; } else if ( fieldtype . equals ( "String" ) ) { textfield . setText ( "" + fieldval ) ; } } }
te	7	public char leerDato ( ) { char dato ; if ( isESTA_EN_RAM ( ) ) { if ( pos < data . length ( ) ) { dato = data . charAt ( pos ) ; } else { throw new IndexOutOfBoundsException ( ) ; } } else { if ( "" . equals ( prox ) && lector . hasNext ( ) ) { prox = lector . next ( ) ; } else if ( "" . equals ( prox ) ) { throw new IndexOutOfBoundsException ( ) ; } else if ( pos >= prox . length ( ) ) { pos = 0 ; if ( lector . hasNext ( ) ) { prox = lector . next ( ) ; } else { throw new IndexOutOfBoundsException ( ) ; } } dato = prox . charAt ( pos ) ; } pos ++ ; return dato ; }
te	0	public void setRunning ( boolean state ) { running = state ; }
te	0	public void setUpvote ( boolean upvote ) { this . upvote = upvote ; }
te	7	@ Override protected void performTask ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { IAction action = null ; String actionString = request . getParameter ( ConstantsJSP . ACTION ) ; if ( actionString == null ) { jump ( Constants . INDEX_JSP , request , response ) ; return ; } User user = null ; try { HttpSession session = request . getSession ( false ) ; if ( session != null ) { user = ( User ) session . getAttribute ( ConstantsJSP . USER ) ; } if ( user != null && user . getRole ( ) . ordinal ( ) >= Role . COURIER . ordinal ( ) ) { action = PlayCourierActions . valueOf ( actionString . toUpperCase ( ) ) . getAction ( ) ; } else { action = PlaysActions . valueOf ( actionString . toUpperCase ( ) ) . getAction ( ) ; } action . execute ( request , response ) ; if ( ! response . isCommitted ( ) ) { jump ( action . getDoneUrl ( ) , request , response ) ; } } catch ( IllegalArgumentException e ) { jumpError ( Constants . INDEX_JSP , Constants . INTERNAL_ERROR , request , response ) ; return ; } catch ( DAOException e ) { jumpError ( action . getErrorUrl ( ) , e . getMessage ( ) , request , response ) ; return ; } }
te	5	public void setCell ( int col , int row , boolean alive ) { if ( row >= 0 && row < 8 && col >= 0 && col < 8 ) { if ( alive ) { cells |= ( ( long ) 1 << ( 8 * row + col ) ) ; } else { cells &= ~ ( ( long ) 1 << ( 8 * row + col ) ) ; } } }
te	8	public String evaluateRiskColumn_innerMethod ( TransferredFile dbSQLDumpFileToTransfer , Context initialContext , long gid ) { System . err . println ( "Method evaluatePolicy_RiskinnerMethod  gid:" + gid + "  thread number:" + Thread . currentThread ( ) . getId ( ) ) ; logger . writeLog ( Level . ALL , "Method evaluatePolicy_RiskinnerMethod  gid:" + gid + "  thread number:" + Thread . currentThread ( ) . getId ( ) ) ; logger . writeLog ( Level . ALL , ( "DBA_utils-Instance #" + this . toString ( ) ) ) ; this . gid = gid ; DataHandler dbDumpFileDataHandler ; try { dbDumpFileDataHandler = convertZipFile ( dbSQLDumpFileToTransfer , dbSQLDumpFileToTransfer . getFileName ( ) ) ; } catch ( ZipException e2 ) { e2 . printStackTrace ( ) ; return "-1  Error: The given file is not a Zip file" ; } catch ( FileNotFoundException e2 ) { e2 . printStackTrace ( ) ; return "-2  Error: Impossible to find the specified file" ; } catch ( IOException e2 ) { e2 . printStackTrace ( ) ; return "-3  I/O Error" ; } Context initContext = null ; if ( initialContext == null ) { try { initContext = new InitialContext ( ) ; } catch ( NamingException e1 ) { e1 . printStackTrace ( ) ; } } else { initContext = initialContext ; } if ( initContext == null ) { return "-4  Error: Null context" ; } MySQLQueryFactory mySQLFactory = null ; try { mySQLFactory = setupAndApplyDBDump ( initContext , dbDumpFileDataHandler . getInputStream ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; return "-5  Problem with input DB dump" ; } if ( mySQLFactory == null ) { return "-5  Problem with input DB dump" ; } String result = columnRiskEvaluator ( mySQLFactory ) ; return result ; }
te	7	public String toString ( ) { String str = "" ; if ( frameData != null ) { for ( int s = 0 ; s < getNumSignals ( ) ; s ++ ) { String st = "" ; for ( int f = 0 ; f < frameData . length ; f ++ ) if ( frameData [ f ] [ s ] >= 0 ) st += ( st . length ( ) == 0 ? "" : " " ) + f + "=" + frameData [ f ] [ s ] ; str += "(" + st + ")" ; } for ( int f = 0 ; f < pauseData . length ; f ++ ) if ( pauseData [ f ] ) str += " " + f ; } return str ; }
te	8	public void setActivePanel ( final PanelType type ) { if ( this . frame != null ) { this . frame . dispose ( ) ; } switch ( type ) { case START : this . frame = new PlainPanel ( this . sfb , SWT . FILL , CompositeBrick . default ) ; break ; case CLUBS : this . frame = new ClubPanel ( this . sfb , SWT . FILL , CompositeBrick . default ) ; break ; case GYM : this . frame = new GymPanel ( this . sfb , SWT . FILL , CompositeBrick . default ) ; break ; case SPIELTAG : this . frame = new GamePanel ( this . sfb , SWT . FILL , CompositeBrick . default ) ; break ; case SPIELTAG_DIR : this . frame = new AllGamesPanel ( this . sfb , SWT . FILL , CompositeBrick . default ) ; break ; case TEAMS : this . frame = new TeamPanel ( this . sfb , SWT . FILL , CompositeBrick . default ) ; break ; case RANKING : this . frame = new RankingPanel ( this . sfb , SWT . FILL , CompositeBrick . default ) ; break ; } this . sfb . setWeights ( new int [ ] { 30 , 70 } ) ; }
te	5	@ Test public void testlimitNunberOfItems ( ) throws IOException { block = new StorageBlock ( testDir , 2 , StorageManager . DEFAULT_CAPACITY_PER_BLOCK , storageMode ) ; int limit = 1000 ; String testString = "Test String" ; byte [ ] testBytes = testString . getBytes ( ) ; assertTrue ( StorageManager . DEFAULT_CAPACITY_PER_BLOCK == block . getCapacity ( ) ) ; assertTrue ( 0 == block . getDirty ( ) ) ; assertTrue ( block . getDirtyRatio ( ) <= 1e-6 ) ; assertTrue ( 2 == block . getIndex ( ) ) ; Pointer [ ] pointers = new Pointer [ limit ] ; for ( int i = 0 ; i < limit ; i ++ ) { Pointer pointer = block . store ( testBytes ) ; pointers [ i ] = pointer ; assertTrue ( 0 == block . getDirty ( ) ) ; assertTrue ( block . getDirtyRatio ( ) <= 1e-6 ) ; assertTrue ( i * ( testBytes . length ) == pointer . getPosition ( ) ) ; assertTrue ( testBytes . length == pointer . getLength ( ) ) ; assertTrue ( testBytes . length * ( i + 1 ) == block . getUsed ( ) ) ; } for ( int i = 0 ; i < limit ; i ++ ) { byte [ ] resultBytes = block . retrieve ( pointers [ i ] ) ; assertEquals ( testString , new String ( resultBytes ) ) ; assertTrue ( 0 == block . getDirty ( ) ) ; assertTrue ( block . getDirtyRatio ( ) <= 1e-6 ) ; assertTrue ( i * ( testBytes . length ) == pointers [ i ] . getPosition ( ) ) ; assertTrue ( testBytes . length == pointers [ i ] . getLength ( ) ) ; assertTrue ( testBytes . length * limit == block . getUsed ( ) ) ; } String smallTestString = "Test Str" ; byte [ ] smallTestBytes = smallTestString . getBytes ( ) ; for ( int i = 0 ; i < limit ; i ++ ) { pointers [ i ] = block . update ( pointers [ i ] , smallTestBytes ) ; assertTrue ( ( i + 1 ) * ( testBytes . length - smallTestBytes . length ) == block . getDirty ( ) ) ; double expectedRatio = ( i + 1 ) * ( testBytes . length - smallTestBytes . length ) * 1.0 / StorageManager . DEFAULT_CAPACITY_PER_BLOCK ; assertTrue ( Math . abs ( expectedRatio - block . getDirtyRatio ( ) ) <= 1e-6 ) ; assertTrue ( i * ( testBytes . length ) == pointers [ i ] . getPosition ( ) ) ; assertTrue ( smallTestBytes . length == pointers [ i ] . getLength ( ) ) ; assertTrue ( testBytes . length * limit - ( testBytes . length - smallTestBytes . length ) * ( i + 1 ) == block . getUsed ( ) ) ; } for ( int i = 0 ; i < limit ; i ++ ) { pointers [ i ] = block . update ( pointers [ i ] , testBytes ) ; assertTrue ( ( ( testBytes . length - smallTestBytes . length ) * ( limit - i - 1 ) ) + ( i + 1 ) * testBytes . length == block . getDirty ( ) ) ; double expectedRatio = ( ( ( testBytes . length - smallTestBytes . length ) * ( limit - i - 1 ) ) + ( i + 1 ) * testBytes . length ) * 1.0 / StorageManager . DEFAULT_CAPACITY_PER_BLOCK ; assertTrue ( Math . abs ( expectedRatio - block . getDirtyRatio ( ) ) <= 1e-6 ) ; assertTrue ( ( limit + i ) * testBytes . length == pointers [ i ] . getPosition ( ) ) ; assertTrue ( testBytes . length == pointers [ i ] . getLength ( ) ) ; } assertTrue ( testBytes . length * limit == block . getUsed ( ) ) ; for ( int i = 0 ; i < limit ; i ++ ) { byte [ ] resultBytes = block . remove ( pointers [ i ] ) ; assertEquals ( testString , new String ( resultBytes ) ) ; double expectedRatio = ( testBytes . length * limit + testBytes . length * ( i + 1 ) ) * 1.0 / StorageManager . DEFAULT_CAPACITY_PER_BLOCK ; assertTrue ( Math . abs ( expectedRatio - block . getDirtyRatio ( ) ) <= 1e-6 ) ; } assertTrue ( 0 == block . getUsed ( ) ) ; block . free ( ) ; assertTrue ( StorageManager . DEFAULT_CAPACITY_PER_BLOCK == block . getCapacity ( ) ) ; assertTrue ( 0 == block . getDirty ( ) ) ; assertTrue ( block . getDirtyRatio ( ) <= 1e-6 ) ; assertTrue ( 2 == block . getIndex ( ) ) ; }
te	0	public AddOrigen ( java . awt . Frame parent , boolean modal ) { super ( parent , modal ) ; initComponents ( ) ; }
te	2	public static JSONObject toJSONObject ( String string ) throws JSONException { JSONObject jo = new JSONObject ( ) ; HTTPTokener x = new HTTPTokener ( string ) ; String token ; token = x . nextToken ( ) ; if ( token . toUpperCase ( ) . startsWith ( "HTTP" ) ) { jo . put ( "HTTP-Version" , token ) ; jo . put ( "Status-Code" , x . nextToken ( ) ) ; jo . put ( "Reason-Phrase" , x . nextTo (  ) ) ; x . next ( ) ; } else { jo . put ( "Method" , token ) ; jo . put ( "Request-URI" , x . nextToken ( ) ) ; jo . put ( "HTTP-Version" , x . nextToken ( ) ) ; } while ( x . more ( ) ) { String name = x . nextTo ( : ) ; x . next ( : ) ; jo . put ( name , x . nextTo (  ) ) ; x . next ( ) ; } return jo ; }
te	2	public void run ( ) { for ( String name : names ) { Apple apple = new Apple ( name ) ; dispatcher . dataReceived ( apple ) ; System . out . println ( "Built apple: " + apple ) ; try { Thread . sleep ( 900 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } dispatcher . dataReceived ( new Key ( all ( Apple . class ) ) ) ; }
te	3	private static boolean hasAccess ( IGraph g , IGraph access ) { for ( int i = 0 ; i < g . size ( ) ; i ++ ) { for ( int j = 0 ; j < access . size ( ) ; j ++ ) { String a = g . get ( i ) . getName ( ) ; String b = access . get ( j ) . getName ( ) ; if ( a . equals ( b ) ) return true ; } } return false ; }
te	9X	private void doTransfer ( ) throws IOException { if ( ressourceInputStream == null ) { if ( sendHeaderInRsp ) { String header = new FileRequestResponseMessage ( ResponseCode . NEVER_TRY_AGAIN , 0 ) . Serialize ( ) ; logger . info ( "send header '" + header + "'" ) ; networkOutputStream . write ( header . getBytes ( ) ) ; } networkOutputStream . close ( ) ; return ; } else { if ( offset > numAvailableData ) { logger . log ( Level . INFO , "Requested offset is not valid: requested " + offset + "  length of file: " + numAvailableData ) ; if ( sendHeaderInRsp ) networkOutputStream . write ( new FileRequestResponseMessage ( ResponseCode . OK , 0 ) . Serialize ( ) . getBytes ( ) ) ; networkOutputStream . close ( ) ; transferState = TransferStatus . Finished ; return ; } if ( offset + expectedTransferVolume > numAvailableData ) { logger . log ( Level . INFO , "Requested length of " + expectedTransferVolume + " was too large  shortened  it to " + expectedTransferVolume ) ; expectedTransferVolume = numAvailableData - offset ; } transferState = TransferStatus . Transfering ; if ( sendHeaderInRsp ) networkOutputStream . write ( ( new FileRequestResponseMessage ( ResponseCode . OK , expectedTransferVolume ) . Serialize ( ) ) . getBytes ( Message . ENCODING ) ) ; if ( bufferSize == - 1 ) { bufferSize = FALLBACK_BUFFER_SIZE ; logger . log ( Level . INFO , "Using fallback buffersize " + bufferSize ) ; } logger . info ( "sending data" ) ; ressourceInputStream . skip ( offset ) ; int bytesRead = 0 ; int bytesToRead = bufferSize ; byte [ ] buffer = new byte [ bufferSize ] ; while ( bytesToRead > 0 && keepTransferAlive && totalTransferedVolume < expectedTransferVolume && ( bytesRead = ressourceInputStream . read ( buffer , 0 , bytesToRead ) ) != - 1 ) { networkOutputStream . write ( buffer , 0 , bytesRead ) ; totalTransferedVolume += bytesRead ; if ( totalTransferedVolume + bytesToRead > expectedTransferVolume ) { bytesToRead = ( int ) ( expectedTransferVolume - totalTransferedVolume ) ; } } networkOutputStream . flush ( ) ; networkOutputStream . close ( ) ; ressourceInputStream . close ( ) ; logger . info ( "finished sending data" ) ; if ( totalTransferedVolume == expectedTransferVolume ) transferState = TransferStatus . Finished ; else { if ( ! keepTransferAlive ) transferState = TransferStatus . Canceled ; else transferState = TransferStatus . LostConnection ; } } }
te	0	public byte getNotSettable ( ) { return notSettable ; }
te	9X	protected void downloadJars ( String path ) throws Exception { File versionFile = new File ( path , "md5s" ) ; Properties md5s = new Properties ( ) ; if ( versionFile . exists ( ) ) { try { FileInputStream fis = new FileInputStream ( versionFile ) ; md5s . load ( fis ) ; fis . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } state = 4 ; int [ ] fileSizes = new int [ urlList . length ] ; boolean [ ] skip = new boolean [ urlList . length ] ; for ( int i = 0 ; i < urlList . length ; i ++ ) { URLConnection urlconnection = urlList [ i ] . openConnection ( ) ; urlconnection . setDefaultUseCaches ( false ) ; skip [ i ] = false ; if ( ( urlconnection instanceof HttpURLConnection ) ) { ( ( HttpURLConnection ) urlconnection ) . setRequestMethod ( "HEAD" ) ; int code = ( ( HttpURLConnection ) urlconnection ) . getResponseCode ( ) ; if ( code / 100 == 3 ) { skip [ i ] = true ; } } fileSizes [ i ] = urlconnection . getContentLength ( ) ; totalSizeDownload += fileSizes [ i ] ; } int initialPercentage = this . percentage = 10 ; byte [ ] buffer = new byte [ 65536 ] ; for ( int i = 0 ; i < urlList . length ; i ++ ) { if ( skip [ i ] != false ) { percentage = ( initialPercentage + fileSizes [ i ] * 45 / totalSizeDownload ) ; } boolean downloadFile = true ; while ( downloadFile ) { downloadFile = false ; URLConnection urlconnection = urlList [ i ] . openConnection ( ) ; String etag = "" ; if ( ( urlconnection instanceof HttpURLConnection ) ) { urlconnection . setRequestProperty ( "Cache-Control" , "no-cache" ) ; urlconnection . connect ( ) ; etag = urlconnection . getHeaderField ( "ETag" ) ; } String currentFile = getFileName ( urlList [ i ] ) ; InputStream inputstream = getJarInputStream ( currentFile , urlconnection ) ; FileOutputStream fos = new FileOutputStream ( path + currentFile ) ; long downloadStartTime = System . currentTimeMillis ( ) ; int downloadedAmount = 0 ; int fileSize = 0 ; String downloadSpeedMessage = "" ; MessageDigest m = MessageDigest . getInstance ( "MD5" ) ; int bufferSize ; while ( ( bufferSize = inputstream . read ( buffer , 0 , buffer . length ) ) != - 1 ) { fos . write ( buffer , 0 , bufferSize ) ; m . update ( buffer , 0 , bufferSize ) ; currentSizeDownload += bufferSize ; fileSize += bufferSize ; percentage = ( initialPercentage + currentSizeDownload * 45 / totalSizeDownload ) ; subtaskMessage = ( "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430: " + currentFile + " " + currentSizeDownload * 100 / totalSizeDownload + "%" ) ; downloadedAmount += bufferSize ; long timeLapse = System . currentTimeMillis ( ) - downloadStartTime ; if ( timeLapse >= 1000 ) { float downloadSpeed = downloadedAmount / ( float ) timeLapse ; downloadSpeed = ( int ) ( downloadSpeed * 100.0F ) / 100.0F ; downloadSpeedMessage = " @ " + downloadSpeed + " KB/sec" ; downloadedAmount = 0 ; downloadStartTime += 1000 ; } subtaskMessage += downloadSpeedMessage ; } inputstream . close ( ) ; fos . close ( ) ; } } }
te	2	public void aiUp ( ) { if ( Realm . player . x == x && Realm . player . y == ( y - 1 ) ) { attack ( ) ; } else { walkUp ( ) ; } }
te	6	public AudioDevice createAudioDevice ( ) throws JavaLayerException { AudioDevice device = null ; AudioDeviceFactory [ ] factories = getFactoriesPriority ( ) ; if ( factories == null ) throw new JavaLayerException ( this + ": no factories registered" ) ; JavaLayerException lastEx = null ; for ( int i = 0 ; ( device == null ) && ( i < factories . length ) ; i ++ ) { try { device = factories [ i ] . createAudioDevice ( ) ; } catch ( JavaLayerException ex ) { lastEx = ex ; } } if ( device == null && lastEx != null ) { throw new JavaLayerException ( "Cannot create AudioDevice" , lastEx ) ; } return device ; }
